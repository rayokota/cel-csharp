// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/api/expr/test/v1/proto2/test_all_types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Api.Expr.Test.V1.Proto2 {

  /// <summary>Holder for reflection information generated from google/api/expr/test/v1/proto2/test_all_types.proto</summary>
  public static partial class TestAllTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for google/api/expr/test/v1/proto2/test_all_types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TestAllTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjNnb29nbGUvYXBpL2V4cHIvdGVzdC92MS9wcm90bzIvdGVzdF9hbGxfdHlw",
            "ZXMucHJvdG8SHmdvb2dsZS5hcGkuZXhwci50ZXN0LnYxLnByb3RvMhoZZ29v",
            "Z2xlL3Byb3RvYnVmL2FueS5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL2R1cmF0",
            "aW9uLnByb3RvGhxnb29nbGUvcHJvdG9idWYvc3RydWN0LnByb3RvGh9nb29n",
            "bGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGh5nb29nbGUvcHJvdG9idWYv",
            "d3JhcHBlcnMucHJvdG8iuRUKDFRlc3RBbGxUeXBlcxIZCgxzaW5nbGVfaW50",
            "MzIYASABKAU6Ay0zMhIZCgxzaW5nbGVfaW50NjQYAiABKAM6Ay02NBIZCg1z",
            "aW5nbGVfdWludDMyGAMgASgNOgIzMhIZCg1zaW5nbGVfdWludDY0GAQgASgE",
            "OgI2NBIVCg1zaW5nbGVfc2ludDMyGAUgASgREhUKDXNpbmdsZV9zaW50NjQY",
            "BiABKBISFgoOc2luZ2xlX2ZpeGVkMzIYByABKAcSFgoOc2luZ2xlX2ZpeGVk",
            "NjQYCCABKAYSFwoPc2luZ2xlX3NmaXhlZDMyGAkgASgPEhcKD3NpbmdsZV9z",
            "Zml4ZWQ2NBgKIAEoEBIXCgxzaW5nbGVfZmxvYXQYCyABKAI6ATMSGgoNc2lu",
            "Z2xlX2RvdWJsZRgMIAEoAToDNi40EhkKC3NpbmdsZV9ib29sGA0gASgIOgR0",
            "cnVlEhwKDXNpbmdsZV9zdHJpbmcYDiABKAk6BWVtcHR5EhoKDHNpbmdsZV9i",
            "eXRlcxgPIAEoDDoEbm9uZRIoCgpzaW5nbGVfYW55GGQgASgLMhQuZ29vZ2xl",
            "LnByb3RvYnVmLkFueRIyCg9zaW5nbGVfZHVyYXRpb24YZSABKAsyGS5nb29n",
            "bGUucHJvdG9idWYuRHVyYXRpb24SNAoQc2luZ2xlX3RpbWVzdGFtcBhmIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoNc2luZ2xlX3N0cnVj",
            "dBhnIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QSLAoMc2luZ2xlX3Zh",
            "bHVlGGggASgLMhYuZ29vZ2xlLnByb3RvYnVmLlZhbHVlEjkKFHNpbmdsZV9p",
            "bnQ2NF93cmFwcGVyGGkgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFs",
            "dWUSOQoUc2luZ2xlX2ludDMyX3dyYXBwZXIYaiABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuSW50MzJWYWx1ZRI7ChVzaW5nbGVfZG91YmxlX3dyYXBwZXIYayAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSOQoUc2luZ2xlX2Zs",
            "b2F0X3dyYXBwZXIYbCABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1",
            "ZRI7ChVzaW5nbGVfdWludDY0X3dyYXBwZXIYbSABKAsyHC5nb29nbGUucHJv",
            "dG9idWYuVUludDY0VmFsdWUSOwoVc2luZ2xlX3VpbnQzMl93cmFwcGVyGG4g",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVlEjsKFXNpbmdsZV9z",
            "dHJpbmdfd3JhcHBlchhvIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdW",
            "YWx1ZRI3ChNzaW5nbGVfYm9vbF93cmFwcGVyGHAgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLkJvb2xWYWx1ZRI5ChRzaW5nbGVfYnl0ZXNfd3JhcHBlchhxIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5CeXRlc1ZhbHVlEi4KCmxpc3RfdmFsdWUY",
            "ciABKAsyGi5nb29nbGUucHJvdG9idWYuTGlzdFZhbHVlElsKFXNpbmdsZV9u",
            "ZXN0ZWRfbWVzc2FnZRgVIAEoCzI6Lmdvb2dsZS5hcGkuZXhwci50ZXN0LnYx",
            "LnByb3RvMi5UZXN0QWxsVHlwZXMuTmVzdGVkTWVzc2FnZUgAEloKEnNpbmds",
            "ZV9uZXN0ZWRfZW51bRgWIAEoDjI3Lmdvb2dsZS5hcGkuZXhwci50ZXN0LnYx",
            "LnByb3RvMi5UZXN0QWxsVHlwZXMuTmVzdGVkRW51bToDQkFSSAASVgoSc3Rh",
            "bmRhbG9uZV9tZXNzYWdlGBcgASgLMjouZ29vZ2xlLmFwaS5leHByLnRlc3Qu",
            "djEucHJvdG8yLlRlc3RBbGxUeXBlcy5OZXN0ZWRNZXNzYWdlElAKD3N0YW5k",
            "YWxvbmVfZW51bRgYIAEoDjI3Lmdvb2dsZS5hcGkuZXhwci50ZXN0LnYxLnBy",
            "b3RvMi5UZXN0QWxsVHlwZXMuTmVzdGVkRW51bRIWCg5yZXBlYXRlZF9pbnQz",
            "MhgfIAMoBRIWCg5yZXBlYXRlZF9pbnQ2NBggIAMoAxIXCg9yZXBlYXRlZF91",
            "aW50MzIYISADKA0SFwoPcmVwZWF0ZWRfdWludDY0GCIgAygEEhcKD3JlcGVh",
            "dGVkX3NpbnQzMhgjIAMoERIXCg9yZXBlYXRlZF9zaW50NjQYJCADKBISGAoQ",
            "cmVwZWF0ZWRfZml4ZWQzMhglIAMoBxIYChByZXBlYXRlZF9maXhlZDY0GCYg",
            "AygGEhkKEXJlcGVhdGVkX3NmaXhlZDMyGCcgAygPEhkKEXJlcGVhdGVkX3Nm",
            "aXhlZDY0GCggAygQEhYKDnJlcGVhdGVkX2Zsb2F0GCkgAygCEhcKD3JlcGVh",
            "dGVkX2RvdWJsZRgqIAMoARIVCg1yZXBlYXRlZF9ib29sGCsgAygIEhcKD3Jl",
            "cGVhdGVkX3N0cmluZxgsIAMoCRIWCg5yZXBlYXRlZF9ieXRlcxgtIAMoDBJb",
            "ChdyZXBlYXRlZF9uZXN0ZWRfbWVzc2FnZRgzIAMoCzI6Lmdvb2dsZS5hcGku",
            "ZXhwci50ZXN0LnYxLnByb3RvMi5UZXN0QWxsVHlwZXMuTmVzdGVkTWVzc2Fn",
            "ZRJVChRyZXBlYXRlZF9uZXN0ZWRfZW51bRg0IAMoDjI3Lmdvb2dsZS5hcGku",
            "ZXhwci50ZXN0LnYxLnByb3RvMi5UZXN0QWxsVHlwZXMuTmVzdGVkRW51bRIh",
            "ChVyZXBlYXRlZF9zdHJpbmdfcGllY2UYNSADKAlCAggCEhkKDXJlcGVhdGVk",
            "X2NvcmQYNiADKAlCAggBEl0KFXJlcGVhdGVkX2xhenlfbWVzc2FnZRg3IAMo",
            "CzI6Lmdvb2dsZS5hcGkuZXhwci50ZXN0LnYxLnByb3RvMi5UZXN0QWxsVHlw",
            "ZXMuTmVzdGVkTWVzc2FnZUICKAESXAoRbWFwX3N0cmluZ19zdHJpbmcYPSAD",
            "KAsyQS5nb29nbGUuYXBpLmV4cHIudGVzdC52MS5wcm90bzIuVGVzdEFsbFR5",
            "cGVzLk1hcFN0cmluZ1N0cmluZ0VudHJ5EmMKFW1hcF9pbnQ2NF9uZXN0ZWRf",
            "dHlwZRg+IAMoCzJELmdvb2dsZS5hcGkuZXhwci50ZXN0LnYxLnByb3RvMi5U",
            "ZXN0QWxsVHlwZXMuTWFwSW50NjROZXN0ZWRUeXBlRW50cnkaGwoNTmVzdGVk",
            "TWVzc2FnZRIKCgJiYhgBIAEoBRo2ChRNYXBTdHJpbmdTdHJpbmdFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGm0KF01hcEludDY0TmVz",
            "dGVkVHlwZUVudHJ5EgsKA2tleRgBIAEoAxJBCgV2YWx1ZRgCIAEoCzIyLmdv",
            "b2dsZS5hcGkuZXhwci50ZXN0LnYxLnByb3RvMi5OZXN0ZWRUZXN0QWxsVHlw",
            "ZXM6AjgBIicKCk5lc3RlZEVudW0SBwoDRk9PEAASBwoDQkFSEAESBwoDQkFa",
            "EAJCDQoLbmVzdGVkX3R5cGUilgEKEk5lc3RlZFRlc3RBbGxUeXBlcxJBCgVj",
            "aGlsZBgBIAEoCzIyLmdvb2dsZS5hcGkuZXhwci50ZXN0LnYxLnByb3RvMi5O",
            "ZXN0ZWRUZXN0QWxsVHlwZXMSPQoHcGF5bG9hZBgCIAEoCzIsLmdvb2dsZS5h",
            "cGkuZXhwci50ZXN0LnYxLnByb3RvMi5UZXN0QWxsVHlwZXMiJgoMVGVzdFJl",
            "cXVpcmVkEhYKDnJlcXVpcmVkX2ludDMyGAEgAigFKicKCkdsb2JhbEVudW0S",
            "BwoDR09PEAASBwoDR0FSEAESBwoDR0FaEAJCdAoiY29tLmdvb2dsZS5hcGku",
            "ZXhwci50ZXN0LnYxLnByb3RvMkIRVGVzdEFsbFR5cGVzUHJvdG9aOGdpdGh1",
            "Yi5jb20vZ29vZ2xlL2NlbC1zcGVjL3Rlc3QvdjEvcHJvdG8yL3Rlc3RfYWxs",
            "X3R5cGVz+AEB"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Api.Expr.Test.V1.Proto2.GlobalEnum), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes), global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Parser, new[]{ "SingleInt32", "SingleInt64", "SingleUint32", "SingleUint64", "SingleSint32", "SingleSint64", "SingleFixed32", "SingleFixed64", "SingleSfixed32", "SingleSfixed64", "SingleFloat", "SingleDouble", "SingleBool", "SingleString", "SingleBytes", "SingleAny", "SingleDuration", "SingleTimestamp", "SingleStruct", "SingleValue", "SingleInt64Wrapper", "SingleInt32Wrapper", "SingleDoubleWrapper", "SingleFloatWrapper", "SingleUint64Wrapper", "SingleUint32Wrapper", "SingleStringWrapper", "SingleBoolWrapper", "SingleBytesWrapper", "ListValue", "SingleNestedMessage", "SingleNestedEnum", "StandaloneMessage", "StandaloneEnum", "RepeatedInt32", "RepeatedInt64", "RepeatedUint32", "RepeatedUint64", "RepeatedSint32", "RepeatedSint64", "RepeatedFixed32", "RepeatedFixed64", "RepeatedSfixed32", "RepeatedSfixed64", "RepeatedFloat", "RepeatedDouble", "RepeatedBool", "RepeatedString", "RepeatedBytes", "RepeatedNestedMessage", "RepeatedNestedEnum", "RepeatedStringPiece", "RepeatedCord", "RepeatedLazyMessage", "MapStringString", "MapInt64NestedType" }, new[]{ "NestedType" }, new[]{ typeof(global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage), global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage.Parser, new[]{ "Bb" }, null, null, null, null),
            null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Expr.Test.V1.Proto2.NestedTestAllTypes), global::Google.Api.Expr.Test.V1.Proto2.NestedTestAllTypes.Parser, new[]{ "Child", "Payload" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Expr.Test.V1.Proto2.TestRequired), global::Google.Api.Expr.Test.V1.Proto2.TestRequired.Parser, new[]{ "RequiredInt32" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// This proto tests that global enums are resolved correctly.
  /// </summary>
  public enum GlobalEnum {
    [pbr::OriginalName("GOO")] Goo = 0,
    [pbr::OriginalName("GAR")] Gar = 1,
    [pbr::OriginalName("GAZ")] Gaz = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// This proto includes every type of field in both singular and repeated
  /// forms.
  /// </summary>
  public sealed partial class TestAllTypes : pb::IMessage<TestAllTypes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TestAllTypes> _parser = new pb::MessageParser<TestAllTypes>(() => new TestAllTypes());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestAllTypes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Expr.Test.V1.Proto2.TestAllTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestAllTypes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestAllTypes(TestAllTypes other) : this() {
      _hasBits0 = other._hasBits0;
      singleInt32_ = other.singleInt32_;
      singleInt64_ = other.singleInt64_;
      singleUint32_ = other.singleUint32_;
      singleUint64_ = other.singleUint64_;
      singleSint32_ = other.singleSint32_;
      singleSint64_ = other.singleSint64_;
      singleFixed32_ = other.singleFixed32_;
      singleFixed64_ = other.singleFixed64_;
      singleSfixed32_ = other.singleSfixed32_;
      singleSfixed64_ = other.singleSfixed64_;
      singleFloat_ = other.singleFloat_;
      singleDouble_ = other.singleDouble_;
      singleBool_ = other.singleBool_;
      singleString_ = other.singleString_;
      singleBytes_ = other.singleBytes_;
      singleAny_ = other.singleAny_ != null ? other.singleAny_.Clone() : null;
      singleDuration_ = other.singleDuration_ != null ? other.singleDuration_.Clone() : null;
      singleTimestamp_ = other.singleTimestamp_ != null ? other.singleTimestamp_.Clone() : null;
      singleStruct_ = other.singleStruct_ != null ? other.singleStruct_.Clone() : null;
      singleValue_ = other.singleValue_ != null ? other.singleValue_.Clone() : null;
      SingleInt64Wrapper = other.SingleInt64Wrapper;
      SingleInt32Wrapper = other.SingleInt32Wrapper;
      SingleDoubleWrapper = other.SingleDoubleWrapper;
      SingleFloatWrapper = other.SingleFloatWrapper;
      SingleUint64Wrapper = other.SingleUint64Wrapper;
      SingleUint32Wrapper = other.SingleUint32Wrapper;
      SingleStringWrapper = other.SingleStringWrapper;
      SingleBoolWrapper = other.SingleBoolWrapper;
      SingleBytesWrapper = other.SingleBytesWrapper;
      listValue_ = other.listValue_ != null ? other.listValue_.Clone() : null;
      standaloneMessage_ = other.standaloneMessage_ != null ? other.standaloneMessage_.Clone() : null;
      standaloneEnum_ = other.standaloneEnum_;
      repeatedInt32_ = other.repeatedInt32_.Clone();
      repeatedInt64_ = other.repeatedInt64_.Clone();
      repeatedUint32_ = other.repeatedUint32_.Clone();
      repeatedUint64_ = other.repeatedUint64_.Clone();
      repeatedSint32_ = other.repeatedSint32_.Clone();
      repeatedSint64_ = other.repeatedSint64_.Clone();
      repeatedFixed32_ = other.repeatedFixed32_.Clone();
      repeatedFixed64_ = other.repeatedFixed64_.Clone();
      repeatedSfixed32_ = other.repeatedSfixed32_.Clone();
      repeatedSfixed64_ = other.repeatedSfixed64_.Clone();
      repeatedFloat_ = other.repeatedFloat_.Clone();
      repeatedDouble_ = other.repeatedDouble_.Clone();
      repeatedBool_ = other.repeatedBool_.Clone();
      repeatedString_ = other.repeatedString_.Clone();
      repeatedBytes_ = other.repeatedBytes_.Clone();
      repeatedNestedMessage_ = other.repeatedNestedMessage_.Clone();
      repeatedNestedEnum_ = other.repeatedNestedEnum_.Clone();
      repeatedStringPiece_ = other.repeatedStringPiece_.Clone();
      repeatedCord_ = other.repeatedCord_.Clone();
      repeatedLazyMessage_ = other.repeatedLazyMessage_.Clone();
      mapStringString_ = other.mapStringString_.Clone();
      mapInt64NestedType_ = other.mapInt64NestedType_.Clone();
      switch (other.NestedTypeCase) {
        case NestedTypeOneofCase.SingleNestedMessage:
          SingleNestedMessage = other.SingleNestedMessage.Clone();
          break;
        case NestedTypeOneofCase.SingleNestedEnum:
          SingleNestedEnum = other.SingleNestedEnum;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestAllTypes Clone() {
      return new TestAllTypes(this);
    }

    /// <summary>Field number for the "single_int32" field.</summary>
    public const int SingleInt32FieldNumber = 1;
    private readonly static int SingleInt32DefaultValue = -32;

    private int singleInt32_;
    /// <summary>
    /// Singular
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SingleInt32 {
      get { if ((_hasBits0 & 1) != 0) { return singleInt32_; } else { return SingleInt32DefaultValue; } }
      set {
        _hasBits0 |= 1;
        singleInt32_ = value;
      }
    }
    /// <summary>Gets whether the "single_int32" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleInt32 {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "single_int32" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleInt32() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "single_int64" field.</summary>
    public const int SingleInt64FieldNumber = 2;
    private readonly static long SingleInt64DefaultValue = -64L;

    private long singleInt64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SingleInt64 {
      get { if ((_hasBits0 & 2) != 0) { return singleInt64_; } else { return SingleInt64DefaultValue; } }
      set {
        _hasBits0 |= 2;
        singleInt64_ = value;
      }
    }
    /// <summary>Gets whether the "single_int64" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleInt64 {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "single_int64" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleInt64() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "single_uint32" field.</summary>
    public const int SingleUint32FieldNumber = 3;
    private readonly static uint SingleUint32DefaultValue = 32;

    private uint singleUint32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SingleUint32 {
      get { if ((_hasBits0 & 4) != 0) { return singleUint32_; } else { return SingleUint32DefaultValue; } }
      set {
        _hasBits0 |= 4;
        singleUint32_ = value;
      }
    }
    /// <summary>Gets whether the "single_uint32" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleUint32 {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "single_uint32" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleUint32() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "single_uint64" field.</summary>
    public const int SingleUint64FieldNumber = 4;
    private readonly static ulong SingleUint64DefaultValue = 64UL;

    private ulong singleUint64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SingleUint64 {
      get { if ((_hasBits0 & 8) != 0) { return singleUint64_; } else { return SingleUint64DefaultValue; } }
      set {
        _hasBits0 |= 8;
        singleUint64_ = value;
      }
    }
    /// <summary>Gets whether the "single_uint64" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleUint64 {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "single_uint64" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleUint64() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "single_sint32" field.</summary>
    public const int SingleSint32FieldNumber = 5;
    private readonly static int SingleSint32DefaultValue = 0;

    private int singleSint32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SingleSint32 {
      get { if ((_hasBits0 & 16) != 0) { return singleSint32_; } else { return SingleSint32DefaultValue; } }
      set {
        _hasBits0 |= 16;
        singleSint32_ = value;
      }
    }
    /// <summary>Gets whether the "single_sint32" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleSint32 {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "single_sint32" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleSint32() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "single_sint64" field.</summary>
    public const int SingleSint64FieldNumber = 6;
    private readonly static long SingleSint64DefaultValue = 0L;

    private long singleSint64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SingleSint64 {
      get { if ((_hasBits0 & 32) != 0) { return singleSint64_; } else { return SingleSint64DefaultValue; } }
      set {
        _hasBits0 |= 32;
        singleSint64_ = value;
      }
    }
    /// <summary>Gets whether the "single_sint64" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleSint64 {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "single_sint64" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleSint64() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "single_fixed32" field.</summary>
    public const int SingleFixed32FieldNumber = 7;
    private readonly static uint SingleFixed32DefaultValue = 0;

    private uint singleFixed32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SingleFixed32 {
      get { if ((_hasBits0 & 64) != 0) { return singleFixed32_; } else { return SingleFixed32DefaultValue; } }
      set {
        _hasBits0 |= 64;
        singleFixed32_ = value;
      }
    }
    /// <summary>Gets whether the "single_fixed32" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleFixed32 {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "single_fixed32" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleFixed32() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "single_fixed64" field.</summary>
    public const int SingleFixed64FieldNumber = 8;
    private readonly static ulong SingleFixed64DefaultValue = 0UL;

    private ulong singleFixed64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SingleFixed64 {
      get { if ((_hasBits0 & 128) != 0) { return singleFixed64_; } else { return SingleFixed64DefaultValue; } }
      set {
        _hasBits0 |= 128;
        singleFixed64_ = value;
      }
    }
    /// <summary>Gets whether the "single_fixed64" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleFixed64 {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "single_fixed64" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleFixed64() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "single_sfixed32" field.</summary>
    public const int SingleSfixed32FieldNumber = 9;
    private readonly static int SingleSfixed32DefaultValue = 0;

    private int singleSfixed32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SingleSfixed32 {
      get { if ((_hasBits0 & 256) != 0) { return singleSfixed32_; } else { return SingleSfixed32DefaultValue; } }
      set {
        _hasBits0 |= 256;
        singleSfixed32_ = value;
      }
    }
    /// <summary>Gets whether the "single_sfixed32" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleSfixed32 {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "single_sfixed32" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleSfixed32() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "single_sfixed64" field.</summary>
    public const int SingleSfixed64FieldNumber = 10;
    private readonly static long SingleSfixed64DefaultValue = 0L;

    private long singleSfixed64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SingleSfixed64 {
      get { if ((_hasBits0 & 512) != 0) { return singleSfixed64_; } else { return SingleSfixed64DefaultValue; } }
      set {
        _hasBits0 |= 512;
        singleSfixed64_ = value;
      }
    }
    /// <summary>Gets whether the "single_sfixed64" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleSfixed64 {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "single_sfixed64" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleSfixed64() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "single_float" field.</summary>
    public const int SingleFloatFieldNumber = 11;
    private readonly static float SingleFloatDefaultValue = 3F;

    private float singleFloat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SingleFloat {
      get { if ((_hasBits0 & 1024) != 0) { return singleFloat_; } else { return SingleFloatDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        singleFloat_ = value;
      }
    }
    /// <summary>Gets whether the "single_float" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleFloat {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "single_float" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleFloat() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "single_double" field.</summary>
    public const int SingleDoubleFieldNumber = 12;
    private readonly static double SingleDoubleDefaultValue = 6.4D;

    private double singleDouble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SingleDouble {
      get { if ((_hasBits0 & 2048) != 0) { return singleDouble_; } else { return SingleDoubleDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        singleDouble_ = value;
      }
    }
    /// <summary>Gets whether the "single_double" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleDouble {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "single_double" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleDouble() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "single_bool" field.</summary>
    public const int SingleBoolFieldNumber = 13;
    private readonly static bool SingleBoolDefaultValue = true;

    private bool singleBool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SingleBool {
      get { if ((_hasBits0 & 4096) != 0) { return singleBool_; } else { return SingleBoolDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        singleBool_ = value;
      }
    }
    /// <summary>Gets whether the "single_bool" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleBool {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "single_bool" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleBool() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "single_string" field.</summary>
    public const int SingleStringFieldNumber = 14;
    private readonly static string SingleStringDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("ZW1wdHk="), 0, 5);

    private string singleString_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SingleString {
      get { return singleString_ ?? SingleStringDefaultValue; }
      set {
        singleString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "single_string" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleString {
      get { return singleString_ != null; }
    }
    /// <summary>Clears the value of the "single_string" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleString() {
      singleString_ = null;
    }

    /// <summary>Field number for the "single_bytes" field.</summary>
    public const int SingleBytesFieldNumber = 15;
    private readonly static pb::ByteString SingleBytesDefaultValue = pb::ByteString.FromBase64("bm9uZQ==");

    private pb::ByteString singleBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SingleBytes {
      get { return singleBytes_ ?? SingleBytesDefaultValue; }
      set {
        singleBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "single_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleBytes {
      get { return singleBytes_ != null; }
    }
    /// <summary>Clears the value of the "single_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleBytes() {
      singleBytes_ = null;
    }

    /// <summary>Field number for the "single_any" field.</summary>
    public const int SingleAnyFieldNumber = 100;
    private global::Google.Protobuf.WellKnownTypes.Any singleAny_;
    /// <summary>
    /// Wellknown.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any SingleAny {
      get { return singleAny_; }
      set {
        singleAny_ = value;
      }
    }

    /// <summary>Field number for the "single_duration" field.</summary>
    public const int SingleDurationFieldNumber = 101;
    private global::Google.Protobuf.WellKnownTypes.Duration singleDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration SingleDuration {
      get { return singleDuration_; }
      set {
        singleDuration_ = value;
      }
    }

    /// <summary>Field number for the "single_timestamp" field.</summary>
    public const int SingleTimestampFieldNumber = 102;
    private global::Google.Protobuf.WellKnownTypes.Timestamp singleTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp SingleTimestamp {
      get { return singleTimestamp_; }
      set {
        singleTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "single_struct" field.</summary>
    public const int SingleStructFieldNumber = 103;
    private global::Google.Protobuf.WellKnownTypes.Struct singleStruct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct SingleStruct {
      get { return singleStruct_; }
      set {
        singleStruct_ = value;
      }
    }

    /// <summary>Field number for the "single_value" field.</summary>
    public const int SingleValueFieldNumber = 104;
    private global::Google.Protobuf.WellKnownTypes.Value singleValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Value SingleValue {
      get { return singleValue_; }
      set {
        singleValue_ = value;
      }
    }

    /// <summary>Field number for the "single_int64_wrapper" field.</summary>
    public const int SingleInt64WrapperFieldNumber = 105;
    private static readonly pb::FieldCodec<long?> _single_singleInt64Wrapper_codec = pb::FieldCodec.ForStructWrapper<long>(842);
    private long? singleInt64Wrapper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? SingleInt64Wrapper {
      get { return singleInt64Wrapper_; }
      set {
        singleInt64Wrapper_ = value;
      }
    }


    /// <summary>Field number for the "single_int32_wrapper" field.</summary>
    public const int SingleInt32WrapperFieldNumber = 106;
    private static readonly pb::FieldCodec<int?> _single_singleInt32Wrapper_codec = pb::FieldCodec.ForStructWrapper<int>(850);
    private int? singleInt32Wrapper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? SingleInt32Wrapper {
      get { return singleInt32Wrapper_; }
      set {
        singleInt32Wrapper_ = value;
      }
    }


    /// <summary>Field number for the "single_double_wrapper" field.</summary>
    public const int SingleDoubleWrapperFieldNumber = 107;
    private static readonly pb::FieldCodec<double?> _single_singleDoubleWrapper_codec = pb::FieldCodec.ForStructWrapper<double>(858);
    private double? singleDoubleWrapper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SingleDoubleWrapper {
      get { return singleDoubleWrapper_; }
      set {
        singleDoubleWrapper_ = value;
      }
    }


    /// <summary>Field number for the "single_float_wrapper" field.</summary>
    public const int SingleFloatWrapperFieldNumber = 108;
    private static readonly pb::FieldCodec<float?> _single_singleFloatWrapper_codec = pb::FieldCodec.ForStructWrapper<float>(866);
    private float? singleFloatWrapper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? SingleFloatWrapper {
      get { return singleFloatWrapper_; }
      set {
        singleFloatWrapper_ = value;
      }
    }


    /// <summary>Field number for the "single_uint64_wrapper" field.</summary>
    public const int SingleUint64WrapperFieldNumber = 109;
    private static readonly pb::FieldCodec<ulong?> _single_singleUint64Wrapper_codec = pb::FieldCodec.ForStructWrapper<ulong>(874);
    private ulong? singleUint64Wrapper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong? SingleUint64Wrapper {
      get { return singleUint64Wrapper_; }
      set {
        singleUint64Wrapper_ = value;
      }
    }


    /// <summary>Field number for the "single_uint32_wrapper" field.</summary>
    public const int SingleUint32WrapperFieldNumber = 110;
    private static readonly pb::FieldCodec<uint?> _single_singleUint32Wrapper_codec = pb::FieldCodec.ForStructWrapper<uint>(882);
    private uint? singleUint32Wrapper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? SingleUint32Wrapper {
      get { return singleUint32Wrapper_; }
      set {
        singleUint32Wrapper_ = value;
      }
    }


    /// <summary>Field number for the "single_string_wrapper" field.</summary>
    public const int SingleStringWrapperFieldNumber = 111;
    private static readonly pb::FieldCodec<string> _single_singleStringWrapper_codec = pb::FieldCodec.ForClassWrapper<string>(890);
    private string singleStringWrapper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SingleStringWrapper {
      get { return singleStringWrapper_; }
      set {
        singleStringWrapper_ = value;
      }
    }


    /// <summary>Field number for the "single_bool_wrapper" field.</summary>
    public const int SingleBoolWrapperFieldNumber = 112;
    private static readonly pb::FieldCodec<bool?> _single_singleBoolWrapper_codec = pb::FieldCodec.ForStructWrapper<bool>(898);
    private bool? singleBoolWrapper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? SingleBoolWrapper {
      get { return singleBoolWrapper_; }
      set {
        singleBoolWrapper_ = value;
      }
    }


    /// <summary>Field number for the "single_bytes_wrapper" field.</summary>
    public const int SingleBytesWrapperFieldNumber = 113;
    private static readonly pb::FieldCodec<pb::ByteString> _single_singleBytesWrapper_codec = pb::FieldCodec.ForClassWrapper<pb::ByteString>(906);
    private pb::ByteString singleBytesWrapper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SingleBytesWrapper {
      get { return singleBytesWrapper_; }
      set {
        singleBytesWrapper_ = value;
      }
    }


    /// <summary>Field number for the "list_value" field.</summary>
    public const int ListValueFieldNumber = 114;
    private global::Google.Protobuf.WellKnownTypes.ListValue listValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.ListValue ListValue {
      get { return listValue_; }
      set {
        listValue_ = value;
      }
    }

    /// <summary>Field number for the "single_nested_message" field.</summary>
    public const int SingleNestedMessageFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage SingleNestedMessage {
      get { return nestedTypeCase_ == NestedTypeOneofCase.SingleNestedMessage ? (global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage) nestedType_ : null; }
      set {
        nestedType_ = value;
        nestedTypeCase_ = value == null ? NestedTypeOneofCase.None : NestedTypeOneofCase.SingleNestedMessage;
      }
    }

    /// <summary>Field number for the "single_nested_enum" field.</summary>
    public const int SingleNestedEnumFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum SingleNestedEnum {
      get { return HasSingleNestedEnum ? (global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum) nestedType_ : global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum.Bar; }
      set {
        nestedType_ = value;
        nestedTypeCase_ = NestedTypeOneofCase.SingleNestedEnum;
      }
    }
    /// <summary>Gets whether the "single_nested_enum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSingleNestedEnum {
      get { return nestedTypeCase_ == NestedTypeOneofCase.SingleNestedEnum; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "single_nested_enum" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSingleNestedEnum() {
      if (HasSingleNestedEnum) {
        ClearNestedType();
      }
    }

    /// <summary>Field number for the "standalone_message" field.</summary>
    public const int StandaloneMessageFieldNumber = 23;
    private global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage standaloneMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage StandaloneMessage {
      get { return standaloneMessage_; }
      set {
        standaloneMessage_ = value;
      }
    }

    /// <summary>Field number for the "standalone_enum" field.</summary>
    public const int StandaloneEnumFieldNumber = 24;
    private readonly static global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum StandaloneEnumDefaultValue = global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum.Foo;

    private global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum standaloneEnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum StandaloneEnum {
      get { if ((_hasBits0 & 8192) != 0) { return standaloneEnum_; } else { return StandaloneEnumDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        standaloneEnum_ = value;
      }
    }
    /// <summary>Gets whether the "standalone_enum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStandaloneEnum {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "standalone_enum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStandaloneEnum() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "repeated_int32" field.</summary>
    public const int RepeatedInt32FieldNumber = 31;
    private static readonly pb::FieldCodec<int> _repeated_repeatedInt32_codec
        = pb::FieldCodec.ForInt32(248);
    private readonly pbc::RepeatedField<int> repeatedInt32_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Repeated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RepeatedInt32 {
      get { return repeatedInt32_; }
    }

    /// <summary>Field number for the "repeated_int64" field.</summary>
    public const int RepeatedInt64FieldNumber = 32;
    private static readonly pb::FieldCodec<long> _repeated_repeatedInt64_codec
        = pb::FieldCodec.ForInt64(256);
    private readonly pbc::RepeatedField<long> repeatedInt64_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RepeatedInt64 {
      get { return repeatedInt64_; }
    }

    /// <summary>Field number for the "repeated_uint32" field.</summary>
    public const int RepeatedUint32FieldNumber = 33;
    private static readonly pb::FieldCodec<uint> _repeated_repeatedUint32_codec
        = pb::FieldCodec.ForUInt32(264);
    private readonly pbc::RepeatedField<uint> repeatedUint32_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RepeatedUint32 {
      get { return repeatedUint32_; }
    }

    /// <summary>Field number for the "repeated_uint64" field.</summary>
    public const int RepeatedUint64FieldNumber = 34;
    private static readonly pb::FieldCodec<ulong> _repeated_repeatedUint64_codec
        = pb::FieldCodec.ForUInt64(272);
    private readonly pbc::RepeatedField<ulong> repeatedUint64_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RepeatedUint64 {
      get { return repeatedUint64_; }
    }

    /// <summary>Field number for the "repeated_sint32" field.</summary>
    public const int RepeatedSint32FieldNumber = 35;
    private static readonly pb::FieldCodec<int> _repeated_repeatedSint32_codec
        = pb::FieldCodec.ForSInt32(280);
    private readonly pbc::RepeatedField<int> repeatedSint32_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RepeatedSint32 {
      get { return repeatedSint32_; }
    }

    /// <summary>Field number for the "repeated_sint64" field.</summary>
    public const int RepeatedSint64FieldNumber = 36;
    private static readonly pb::FieldCodec<long> _repeated_repeatedSint64_codec
        = pb::FieldCodec.ForSInt64(288);
    private readonly pbc::RepeatedField<long> repeatedSint64_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RepeatedSint64 {
      get { return repeatedSint64_; }
    }

    /// <summary>Field number for the "repeated_fixed32" field.</summary>
    public const int RepeatedFixed32FieldNumber = 37;
    private static readonly pb::FieldCodec<uint> _repeated_repeatedFixed32_codec
        = pb::FieldCodec.ForFixed32(301);
    private readonly pbc::RepeatedField<uint> repeatedFixed32_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RepeatedFixed32 {
      get { return repeatedFixed32_; }
    }

    /// <summary>Field number for the "repeated_fixed64" field.</summary>
    public const int RepeatedFixed64FieldNumber = 38;
    private static readonly pb::FieldCodec<ulong> _repeated_repeatedFixed64_codec
        = pb::FieldCodec.ForFixed64(305);
    private readonly pbc::RepeatedField<ulong> repeatedFixed64_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RepeatedFixed64 {
      get { return repeatedFixed64_; }
    }

    /// <summary>Field number for the "repeated_sfixed32" field.</summary>
    public const int RepeatedSfixed32FieldNumber = 39;
    private static readonly pb::FieldCodec<int> _repeated_repeatedSfixed32_codec
        = pb::FieldCodec.ForSFixed32(317);
    private readonly pbc::RepeatedField<int> repeatedSfixed32_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RepeatedSfixed32 {
      get { return repeatedSfixed32_; }
    }

    /// <summary>Field number for the "repeated_sfixed64" field.</summary>
    public const int RepeatedSfixed64FieldNumber = 40;
    private static readonly pb::FieldCodec<long> _repeated_repeatedSfixed64_codec
        = pb::FieldCodec.ForSFixed64(321);
    private readonly pbc::RepeatedField<long> repeatedSfixed64_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RepeatedSfixed64 {
      get { return repeatedSfixed64_; }
    }

    /// <summary>Field number for the "repeated_float" field.</summary>
    public const int RepeatedFloatFieldNumber = 41;
    private static readonly pb::FieldCodec<float> _repeated_repeatedFloat_codec
        = pb::FieldCodec.ForFloat(333);
    private readonly pbc::RepeatedField<float> repeatedFloat_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> RepeatedFloat {
      get { return repeatedFloat_; }
    }

    /// <summary>Field number for the "repeated_double" field.</summary>
    public const int RepeatedDoubleFieldNumber = 42;
    private static readonly pb::FieldCodec<double> _repeated_repeatedDouble_codec
        = pb::FieldCodec.ForDouble(337);
    private readonly pbc::RepeatedField<double> repeatedDouble_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> RepeatedDouble {
      get { return repeatedDouble_; }
    }

    /// <summary>Field number for the "repeated_bool" field.</summary>
    public const int RepeatedBoolFieldNumber = 43;
    private static readonly pb::FieldCodec<bool> _repeated_repeatedBool_codec
        = pb::FieldCodec.ForBool(344);
    private readonly pbc::RepeatedField<bool> repeatedBool_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> RepeatedBool {
      get { return repeatedBool_; }
    }

    /// <summary>Field number for the "repeated_string" field.</summary>
    public const int RepeatedStringFieldNumber = 44;
    private static readonly pb::FieldCodec<string> _repeated_repeatedString_codec
        = pb::FieldCodec.ForString(354);
    private readonly pbc::RepeatedField<string> repeatedString_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RepeatedString {
      get { return repeatedString_; }
    }

    /// <summary>Field number for the "repeated_bytes" field.</summary>
    public const int RepeatedBytesFieldNumber = 45;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_repeatedBytes_codec
        = pb::FieldCodec.ForBytes(362);
    private readonly pbc::RepeatedField<pb::ByteString> repeatedBytes_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> RepeatedBytes {
      get { return repeatedBytes_; }
    }

    /// <summary>Field number for the "repeated_nested_message" field.</summary>
    public const int RepeatedNestedMessageFieldNumber = 51;
    private static readonly pb::FieldCodec<global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage> _repeated_repeatedNestedMessage_codec
        = pb::FieldCodec.ForMessage(410, global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage> repeatedNestedMessage_ = new pbc::RepeatedField<global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage>();
    /// <summary>
    /// Repeated and nested
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage> RepeatedNestedMessage {
      get { return repeatedNestedMessage_; }
    }

    /// <summary>Field number for the "repeated_nested_enum" field.</summary>
    public const int RepeatedNestedEnumFieldNumber = 52;
    private static readonly pb::FieldCodec<global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum> _repeated_repeatedNestedEnum_codec
        = pb::FieldCodec.ForEnum(416, x => (int) x, x => (global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum) x);
    private readonly pbc::RepeatedField<global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum> repeatedNestedEnum_ = new pbc::RepeatedField<global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum> RepeatedNestedEnum {
      get { return repeatedNestedEnum_; }
    }

    /// <summary>Field number for the "repeated_string_piece" field.</summary>
    public const int RepeatedStringPieceFieldNumber = 53;
    private static readonly pb::FieldCodec<string> _repeated_repeatedStringPiece_codec
        = pb::FieldCodec.ForString(426);
    private readonly pbc::RepeatedField<string> repeatedStringPiece_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RepeatedStringPiece {
      get { return repeatedStringPiece_; }
    }

    /// <summary>Field number for the "repeated_cord" field.</summary>
    public const int RepeatedCordFieldNumber = 54;
    private static readonly pb::FieldCodec<string> _repeated_repeatedCord_codec
        = pb::FieldCodec.ForString(434);
    private readonly pbc::RepeatedField<string> repeatedCord_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RepeatedCord {
      get { return repeatedCord_; }
    }

    /// <summary>Field number for the "repeated_lazy_message" field.</summary>
    public const int RepeatedLazyMessageFieldNumber = 55;
    private static readonly pb::FieldCodec<global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage> _repeated_repeatedLazyMessage_codec
        = pb::FieldCodec.ForMessage(442, global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage> repeatedLazyMessage_ = new pbc::RepeatedField<global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage> RepeatedLazyMessage {
      get { return repeatedLazyMessage_; }
    }

    /// <summary>Field number for the "map_string_string" field.</summary>
    public const int MapStringStringFieldNumber = 61;
    private static readonly pbc::MapField<string, string>.Codec _map_mapStringString_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 490);
    private readonly pbc::MapField<string, string> mapStringString_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Map
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> MapStringString {
      get { return mapStringString_; }
    }

    /// <summary>Field number for the "map_int64_nested_type" field.</summary>
    public const int MapInt64NestedTypeFieldNumber = 62;
    private static readonly pbc::MapField<long, global::Google.Api.Expr.Test.V1.Proto2.NestedTestAllTypes>.Codec _map_mapInt64NestedType_codec
        = new pbc::MapField<long, global::Google.Api.Expr.Test.V1.Proto2.NestedTestAllTypes>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForMessage(18, global::Google.Api.Expr.Test.V1.Proto2.NestedTestAllTypes.Parser), 498);
    private readonly pbc::MapField<long, global::Google.Api.Expr.Test.V1.Proto2.NestedTestAllTypes> mapInt64NestedType_ = new pbc::MapField<long, global::Google.Api.Expr.Test.V1.Proto2.NestedTestAllTypes>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Google.Api.Expr.Test.V1.Proto2.NestedTestAllTypes> MapInt64NestedType {
      get { return mapInt64NestedType_; }
    }

    private object nestedType_;
    /// <summary>Enum of possible cases for the "nested_type" oneof.</summary>
    public enum NestedTypeOneofCase {
      None = 0,
      SingleNestedMessage = 21,
      SingleNestedEnum = 22,
    }
    private NestedTypeOneofCase nestedTypeCase_ = NestedTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedTypeOneofCase NestedTypeCase {
      get { return nestedTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNestedType() {
      nestedTypeCase_ = NestedTypeOneofCase.None;
      nestedType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestAllTypes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestAllTypes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SingleInt32 != other.SingleInt32) return false;
      if (SingleInt64 != other.SingleInt64) return false;
      if (SingleUint32 != other.SingleUint32) return false;
      if (SingleUint64 != other.SingleUint64) return false;
      if (SingleSint32 != other.SingleSint32) return false;
      if (SingleSint64 != other.SingleSint64) return false;
      if (SingleFixed32 != other.SingleFixed32) return false;
      if (SingleFixed64 != other.SingleFixed64) return false;
      if (SingleSfixed32 != other.SingleSfixed32) return false;
      if (SingleSfixed64 != other.SingleSfixed64) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SingleFloat, other.SingleFloat)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SingleDouble, other.SingleDouble)) return false;
      if (SingleBool != other.SingleBool) return false;
      if (SingleString != other.SingleString) return false;
      if (SingleBytes != other.SingleBytes) return false;
      if (!object.Equals(SingleAny, other.SingleAny)) return false;
      if (!object.Equals(SingleDuration, other.SingleDuration)) return false;
      if (!object.Equals(SingleTimestamp, other.SingleTimestamp)) return false;
      if (!object.Equals(SingleStruct, other.SingleStruct)) return false;
      if (!object.Equals(SingleValue, other.SingleValue)) return false;
      if (SingleInt64Wrapper != other.SingleInt64Wrapper) return false;
      if (SingleInt32Wrapper != other.SingleInt32Wrapper) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SingleDoubleWrapper, other.SingleDoubleWrapper)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(SingleFloatWrapper, other.SingleFloatWrapper)) return false;
      if (SingleUint64Wrapper != other.SingleUint64Wrapper) return false;
      if (SingleUint32Wrapper != other.SingleUint32Wrapper) return false;
      if (SingleStringWrapper != other.SingleStringWrapper) return false;
      if (SingleBoolWrapper != other.SingleBoolWrapper) return false;
      if (SingleBytesWrapper != other.SingleBytesWrapper) return false;
      if (!object.Equals(ListValue, other.ListValue)) return false;
      if (!object.Equals(SingleNestedMessage, other.SingleNestedMessage)) return false;
      if (SingleNestedEnum != other.SingleNestedEnum) return false;
      if (!object.Equals(StandaloneMessage, other.StandaloneMessage)) return false;
      if (StandaloneEnum != other.StandaloneEnum) return false;
      if(!repeatedInt32_.Equals(other.repeatedInt32_)) return false;
      if(!repeatedInt64_.Equals(other.repeatedInt64_)) return false;
      if(!repeatedUint32_.Equals(other.repeatedUint32_)) return false;
      if(!repeatedUint64_.Equals(other.repeatedUint64_)) return false;
      if(!repeatedSint32_.Equals(other.repeatedSint32_)) return false;
      if(!repeatedSint64_.Equals(other.repeatedSint64_)) return false;
      if(!repeatedFixed32_.Equals(other.repeatedFixed32_)) return false;
      if(!repeatedFixed64_.Equals(other.repeatedFixed64_)) return false;
      if(!repeatedSfixed32_.Equals(other.repeatedSfixed32_)) return false;
      if(!repeatedSfixed64_.Equals(other.repeatedSfixed64_)) return false;
      if(!repeatedFloat_.Equals(other.repeatedFloat_)) return false;
      if(!repeatedDouble_.Equals(other.repeatedDouble_)) return false;
      if(!repeatedBool_.Equals(other.repeatedBool_)) return false;
      if(!repeatedString_.Equals(other.repeatedString_)) return false;
      if(!repeatedBytes_.Equals(other.repeatedBytes_)) return false;
      if(!repeatedNestedMessage_.Equals(other.repeatedNestedMessage_)) return false;
      if(!repeatedNestedEnum_.Equals(other.repeatedNestedEnum_)) return false;
      if(!repeatedStringPiece_.Equals(other.repeatedStringPiece_)) return false;
      if(!repeatedCord_.Equals(other.repeatedCord_)) return false;
      if(!repeatedLazyMessage_.Equals(other.repeatedLazyMessage_)) return false;
      if (!MapStringString.Equals(other.MapStringString)) return false;
      if (!MapInt64NestedType.Equals(other.MapInt64NestedType)) return false;
      if (NestedTypeCase != other.NestedTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSingleInt32) hash ^= SingleInt32.GetHashCode();
      if (HasSingleInt64) hash ^= SingleInt64.GetHashCode();
      if (HasSingleUint32) hash ^= SingleUint32.GetHashCode();
      if (HasSingleUint64) hash ^= SingleUint64.GetHashCode();
      if (HasSingleSint32) hash ^= SingleSint32.GetHashCode();
      if (HasSingleSint64) hash ^= SingleSint64.GetHashCode();
      if (HasSingleFixed32) hash ^= SingleFixed32.GetHashCode();
      if (HasSingleFixed64) hash ^= SingleFixed64.GetHashCode();
      if (HasSingleSfixed32) hash ^= SingleSfixed32.GetHashCode();
      if (HasSingleSfixed64) hash ^= SingleSfixed64.GetHashCode();
      if (HasSingleFloat) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SingleFloat);
      if (HasSingleDouble) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SingleDouble);
      if (HasSingleBool) hash ^= SingleBool.GetHashCode();
      if (HasSingleString) hash ^= SingleString.GetHashCode();
      if (HasSingleBytes) hash ^= SingleBytes.GetHashCode();
      if (singleAny_ != null) hash ^= SingleAny.GetHashCode();
      if (singleDuration_ != null) hash ^= SingleDuration.GetHashCode();
      if (singleTimestamp_ != null) hash ^= SingleTimestamp.GetHashCode();
      if (singleStruct_ != null) hash ^= SingleStruct.GetHashCode();
      if (singleValue_ != null) hash ^= SingleValue.GetHashCode();
      if (singleInt64Wrapper_ != null) hash ^= SingleInt64Wrapper.GetHashCode();
      if (singleInt32Wrapper_ != null) hash ^= SingleInt32Wrapper.GetHashCode();
      if (singleDoubleWrapper_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SingleDoubleWrapper);
      if (singleFloatWrapper_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(SingleFloatWrapper);
      if (singleUint64Wrapper_ != null) hash ^= SingleUint64Wrapper.GetHashCode();
      if (singleUint32Wrapper_ != null) hash ^= SingleUint32Wrapper.GetHashCode();
      if (singleStringWrapper_ != null) hash ^= SingleStringWrapper.GetHashCode();
      if (singleBoolWrapper_ != null) hash ^= SingleBoolWrapper.GetHashCode();
      if (singleBytesWrapper_ != null) hash ^= SingleBytesWrapper.GetHashCode();
      if (listValue_ != null) hash ^= ListValue.GetHashCode();
      if (nestedTypeCase_ == NestedTypeOneofCase.SingleNestedMessage) hash ^= SingleNestedMessage.GetHashCode();
      if (HasSingleNestedEnum) hash ^= SingleNestedEnum.GetHashCode();
      if (standaloneMessage_ != null) hash ^= StandaloneMessage.GetHashCode();
      if (HasStandaloneEnum) hash ^= StandaloneEnum.GetHashCode();
      hash ^= repeatedInt32_.GetHashCode();
      hash ^= repeatedInt64_.GetHashCode();
      hash ^= repeatedUint32_.GetHashCode();
      hash ^= repeatedUint64_.GetHashCode();
      hash ^= repeatedSint32_.GetHashCode();
      hash ^= repeatedSint64_.GetHashCode();
      hash ^= repeatedFixed32_.GetHashCode();
      hash ^= repeatedFixed64_.GetHashCode();
      hash ^= repeatedSfixed32_.GetHashCode();
      hash ^= repeatedSfixed64_.GetHashCode();
      hash ^= repeatedFloat_.GetHashCode();
      hash ^= repeatedDouble_.GetHashCode();
      hash ^= repeatedBool_.GetHashCode();
      hash ^= repeatedString_.GetHashCode();
      hash ^= repeatedBytes_.GetHashCode();
      hash ^= repeatedNestedMessage_.GetHashCode();
      hash ^= repeatedNestedEnum_.GetHashCode();
      hash ^= repeatedStringPiece_.GetHashCode();
      hash ^= repeatedCord_.GetHashCode();
      hash ^= repeatedLazyMessage_.GetHashCode();
      hash ^= MapStringString.GetHashCode();
      hash ^= MapInt64NestedType.GetHashCode();
      hash ^= (int) nestedTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSingleInt32) {
        output.WriteRawTag(8);
        output.WriteInt32(SingleInt32);
      }
      if (HasSingleInt64) {
        output.WriteRawTag(16);
        output.WriteInt64(SingleInt64);
      }
      if (HasSingleUint32) {
        output.WriteRawTag(24);
        output.WriteUInt32(SingleUint32);
      }
      if (HasSingleUint64) {
        output.WriteRawTag(32);
        output.WriteUInt64(SingleUint64);
      }
      if (HasSingleSint32) {
        output.WriteRawTag(40);
        output.WriteSInt32(SingleSint32);
      }
      if (HasSingleSint64) {
        output.WriteRawTag(48);
        output.WriteSInt64(SingleSint64);
      }
      if (HasSingleFixed32) {
        output.WriteRawTag(61);
        output.WriteFixed32(SingleFixed32);
      }
      if (HasSingleFixed64) {
        output.WriteRawTag(65);
        output.WriteFixed64(SingleFixed64);
      }
      if (HasSingleSfixed32) {
        output.WriteRawTag(77);
        output.WriteSFixed32(SingleSfixed32);
      }
      if (HasSingleSfixed64) {
        output.WriteRawTag(81);
        output.WriteSFixed64(SingleSfixed64);
      }
      if (HasSingleFloat) {
        output.WriteRawTag(93);
        output.WriteFloat(SingleFloat);
      }
      if (HasSingleDouble) {
        output.WriteRawTag(97);
        output.WriteDouble(SingleDouble);
      }
      if (HasSingleBool) {
        output.WriteRawTag(104);
        output.WriteBool(SingleBool);
      }
      if (HasSingleString) {
        output.WriteRawTag(114);
        output.WriteString(SingleString);
      }
      if (HasSingleBytes) {
        output.WriteRawTag(122);
        output.WriteBytes(SingleBytes);
      }
      if (nestedTypeCase_ == NestedTypeOneofCase.SingleNestedMessage) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(SingleNestedMessage);
      }
      if (HasSingleNestedEnum) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) SingleNestedEnum);
      }
      if (standaloneMessage_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(StandaloneMessage);
      }
      if (HasStandaloneEnum) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) StandaloneEnum);
      }
      repeatedInt32_.WriteTo(output, _repeated_repeatedInt32_codec);
      repeatedInt64_.WriteTo(output, _repeated_repeatedInt64_codec);
      repeatedUint32_.WriteTo(output, _repeated_repeatedUint32_codec);
      repeatedUint64_.WriteTo(output, _repeated_repeatedUint64_codec);
      repeatedSint32_.WriteTo(output, _repeated_repeatedSint32_codec);
      repeatedSint64_.WriteTo(output, _repeated_repeatedSint64_codec);
      repeatedFixed32_.WriteTo(output, _repeated_repeatedFixed32_codec);
      repeatedFixed64_.WriteTo(output, _repeated_repeatedFixed64_codec);
      repeatedSfixed32_.WriteTo(output, _repeated_repeatedSfixed32_codec);
      repeatedSfixed64_.WriteTo(output, _repeated_repeatedSfixed64_codec);
      repeatedFloat_.WriteTo(output, _repeated_repeatedFloat_codec);
      repeatedDouble_.WriteTo(output, _repeated_repeatedDouble_codec);
      repeatedBool_.WriteTo(output, _repeated_repeatedBool_codec);
      repeatedString_.WriteTo(output, _repeated_repeatedString_codec);
      repeatedBytes_.WriteTo(output, _repeated_repeatedBytes_codec);
      repeatedNestedMessage_.WriteTo(output, _repeated_repeatedNestedMessage_codec);
      repeatedNestedEnum_.WriteTo(output, _repeated_repeatedNestedEnum_codec);
      repeatedStringPiece_.WriteTo(output, _repeated_repeatedStringPiece_codec);
      repeatedCord_.WriteTo(output, _repeated_repeatedCord_codec);
      repeatedLazyMessage_.WriteTo(output, _repeated_repeatedLazyMessage_codec);
      mapStringString_.WriteTo(output, _map_mapStringString_codec);
      mapInt64NestedType_.WriteTo(output, _map_mapInt64NestedType_codec);
      if (singleAny_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(SingleAny);
      }
      if (singleDuration_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(SingleDuration);
      }
      if (singleTimestamp_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(SingleTimestamp);
      }
      if (singleStruct_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(SingleStruct);
      }
      if (singleValue_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(SingleValue);
      }
      if (singleInt64Wrapper_ != null) {
        _single_singleInt64Wrapper_codec.WriteTagAndValue(output, SingleInt64Wrapper);
      }
      if (singleInt32Wrapper_ != null) {
        _single_singleInt32Wrapper_codec.WriteTagAndValue(output, SingleInt32Wrapper);
      }
      if (singleDoubleWrapper_ != null) {
        _single_singleDoubleWrapper_codec.WriteTagAndValue(output, SingleDoubleWrapper);
      }
      if (singleFloatWrapper_ != null) {
        _single_singleFloatWrapper_codec.WriteTagAndValue(output, SingleFloatWrapper);
      }
      if (singleUint64Wrapper_ != null) {
        _single_singleUint64Wrapper_codec.WriteTagAndValue(output, SingleUint64Wrapper);
      }
      if (singleUint32Wrapper_ != null) {
        _single_singleUint32Wrapper_codec.WriteTagAndValue(output, SingleUint32Wrapper);
      }
      if (singleStringWrapper_ != null) {
        _single_singleStringWrapper_codec.WriteTagAndValue(output, SingleStringWrapper);
      }
      if (singleBoolWrapper_ != null) {
        _single_singleBoolWrapper_codec.WriteTagAndValue(output, SingleBoolWrapper);
      }
      if (singleBytesWrapper_ != null) {
        _single_singleBytesWrapper_codec.WriteTagAndValue(output, SingleBytesWrapper);
      }
      if (listValue_ != null) {
        output.WriteRawTag(146, 7);
        output.WriteMessage(ListValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSingleInt32) {
        output.WriteRawTag(8);
        output.WriteInt32(SingleInt32);
      }
      if (HasSingleInt64) {
        output.WriteRawTag(16);
        output.WriteInt64(SingleInt64);
      }
      if (HasSingleUint32) {
        output.WriteRawTag(24);
        output.WriteUInt32(SingleUint32);
      }
      if (HasSingleUint64) {
        output.WriteRawTag(32);
        output.WriteUInt64(SingleUint64);
      }
      if (HasSingleSint32) {
        output.WriteRawTag(40);
        output.WriteSInt32(SingleSint32);
      }
      if (HasSingleSint64) {
        output.WriteRawTag(48);
        output.WriteSInt64(SingleSint64);
      }
      if (HasSingleFixed32) {
        output.WriteRawTag(61);
        output.WriteFixed32(SingleFixed32);
      }
      if (HasSingleFixed64) {
        output.WriteRawTag(65);
        output.WriteFixed64(SingleFixed64);
      }
      if (HasSingleSfixed32) {
        output.WriteRawTag(77);
        output.WriteSFixed32(SingleSfixed32);
      }
      if (HasSingleSfixed64) {
        output.WriteRawTag(81);
        output.WriteSFixed64(SingleSfixed64);
      }
      if (HasSingleFloat) {
        output.WriteRawTag(93);
        output.WriteFloat(SingleFloat);
      }
      if (HasSingleDouble) {
        output.WriteRawTag(97);
        output.WriteDouble(SingleDouble);
      }
      if (HasSingleBool) {
        output.WriteRawTag(104);
        output.WriteBool(SingleBool);
      }
      if (HasSingleString) {
        output.WriteRawTag(114);
        output.WriteString(SingleString);
      }
      if (HasSingleBytes) {
        output.WriteRawTag(122);
        output.WriteBytes(SingleBytes);
      }
      if (nestedTypeCase_ == NestedTypeOneofCase.SingleNestedMessage) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(SingleNestedMessage);
      }
      if (HasSingleNestedEnum) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) SingleNestedEnum);
      }
      if (standaloneMessage_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(StandaloneMessage);
      }
      if (HasStandaloneEnum) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) StandaloneEnum);
      }
      repeatedInt32_.WriteTo(ref output, _repeated_repeatedInt32_codec);
      repeatedInt64_.WriteTo(ref output, _repeated_repeatedInt64_codec);
      repeatedUint32_.WriteTo(ref output, _repeated_repeatedUint32_codec);
      repeatedUint64_.WriteTo(ref output, _repeated_repeatedUint64_codec);
      repeatedSint32_.WriteTo(ref output, _repeated_repeatedSint32_codec);
      repeatedSint64_.WriteTo(ref output, _repeated_repeatedSint64_codec);
      repeatedFixed32_.WriteTo(ref output, _repeated_repeatedFixed32_codec);
      repeatedFixed64_.WriteTo(ref output, _repeated_repeatedFixed64_codec);
      repeatedSfixed32_.WriteTo(ref output, _repeated_repeatedSfixed32_codec);
      repeatedSfixed64_.WriteTo(ref output, _repeated_repeatedSfixed64_codec);
      repeatedFloat_.WriteTo(ref output, _repeated_repeatedFloat_codec);
      repeatedDouble_.WriteTo(ref output, _repeated_repeatedDouble_codec);
      repeatedBool_.WriteTo(ref output, _repeated_repeatedBool_codec);
      repeatedString_.WriteTo(ref output, _repeated_repeatedString_codec);
      repeatedBytes_.WriteTo(ref output, _repeated_repeatedBytes_codec);
      repeatedNestedMessage_.WriteTo(ref output, _repeated_repeatedNestedMessage_codec);
      repeatedNestedEnum_.WriteTo(ref output, _repeated_repeatedNestedEnum_codec);
      repeatedStringPiece_.WriteTo(ref output, _repeated_repeatedStringPiece_codec);
      repeatedCord_.WriteTo(ref output, _repeated_repeatedCord_codec);
      repeatedLazyMessage_.WriteTo(ref output, _repeated_repeatedLazyMessage_codec);
      mapStringString_.WriteTo(ref output, _map_mapStringString_codec);
      mapInt64NestedType_.WriteTo(ref output, _map_mapInt64NestedType_codec);
      if (singleAny_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(SingleAny);
      }
      if (singleDuration_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(SingleDuration);
      }
      if (singleTimestamp_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(SingleTimestamp);
      }
      if (singleStruct_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(SingleStruct);
      }
      if (singleValue_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(SingleValue);
      }
      if (singleInt64Wrapper_ != null) {
        _single_singleInt64Wrapper_codec.WriteTagAndValue(ref output, SingleInt64Wrapper);
      }
      if (singleInt32Wrapper_ != null) {
        _single_singleInt32Wrapper_codec.WriteTagAndValue(ref output, SingleInt32Wrapper);
      }
      if (singleDoubleWrapper_ != null) {
        _single_singleDoubleWrapper_codec.WriteTagAndValue(ref output, SingleDoubleWrapper);
      }
      if (singleFloatWrapper_ != null) {
        _single_singleFloatWrapper_codec.WriteTagAndValue(ref output, SingleFloatWrapper);
      }
      if (singleUint64Wrapper_ != null) {
        _single_singleUint64Wrapper_codec.WriteTagAndValue(ref output, SingleUint64Wrapper);
      }
      if (singleUint32Wrapper_ != null) {
        _single_singleUint32Wrapper_codec.WriteTagAndValue(ref output, SingleUint32Wrapper);
      }
      if (singleStringWrapper_ != null) {
        _single_singleStringWrapper_codec.WriteTagAndValue(ref output, SingleStringWrapper);
      }
      if (singleBoolWrapper_ != null) {
        _single_singleBoolWrapper_codec.WriteTagAndValue(ref output, SingleBoolWrapper);
      }
      if (singleBytesWrapper_ != null) {
        _single_singleBytesWrapper_codec.WriteTagAndValue(ref output, SingleBytesWrapper);
      }
      if (listValue_ != null) {
        output.WriteRawTag(146, 7);
        output.WriteMessage(ListValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSingleInt32) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SingleInt32);
      }
      if (HasSingleInt64) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SingleInt64);
      }
      if (HasSingleUint32) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SingleUint32);
      }
      if (HasSingleUint64) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SingleUint64);
      }
      if (HasSingleSint32) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SingleSint32);
      }
      if (HasSingleSint64) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SingleSint64);
      }
      if (HasSingleFixed32) {
        size += 1 + 4;
      }
      if (HasSingleFixed64) {
        size += 1 + 8;
      }
      if (HasSingleSfixed32) {
        size += 1 + 4;
      }
      if (HasSingleSfixed64) {
        size += 1 + 8;
      }
      if (HasSingleFloat) {
        size += 1 + 4;
      }
      if (HasSingleDouble) {
        size += 1 + 8;
      }
      if (HasSingleBool) {
        size += 1 + 1;
      }
      if (HasSingleString) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SingleString);
      }
      if (HasSingleBytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SingleBytes);
      }
      if (singleAny_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SingleAny);
      }
      if (singleDuration_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SingleDuration);
      }
      if (singleTimestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SingleTimestamp);
      }
      if (singleStruct_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SingleStruct);
      }
      if (singleValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SingleValue);
      }
      if (singleInt64Wrapper_ != null) {
        size += _single_singleInt64Wrapper_codec.CalculateSizeWithTag(SingleInt64Wrapper);
      }
      if (singleInt32Wrapper_ != null) {
        size += _single_singleInt32Wrapper_codec.CalculateSizeWithTag(SingleInt32Wrapper);
      }
      if (singleDoubleWrapper_ != null) {
        size += _single_singleDoubleWrapper_codec.CalculateSizeWithTag(SingleDoubleWrapper);
      }
      if (singleFloatWrapper_ != null) {
        size += _single_singleFloatWrapper_codec.CalculateSizeWithTag(SingleFloatWrapper);
      }
      if (singleUint64Wrapper_ != null) {
        size += _single_singleUint64Wrapper_codec.CalculateSizeWithTag(SingleUint64Wrapper);
      }
      if (singleUint32Wrapper_ != null) {
        size += _single_singleUint32Wrapper_codec.CalculateSizeWithTag(SingleUint32Wrapper);
      }
      if (singleStringWrapper_ != null) {
        size += _single_singleStringWrapper_codec.CalculateSizeWithTag(SingleStringWrapper);
      }
      if (singleBoolWrapper_ != null) {
        size += _single_singleBoolWrapper_codec.CalculateSizeWithTag(SingleBoolWrapper);
      }
      if (singleBytesWrapper_ != null) {
        size += _single_singleBytesWrapper_codec.CalculateSizeWithTag(SingleBytesWrapper);
      }
      if (listValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ListValue);
      }
      if (nestedTypeCase_ == NestedTypeOneofCase.SingleNestedMessage) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SingleNestedMessage);
      }
      if (HasSingleNestedEnum) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SingleNestedEnum);
      }
      if (standaloneMessage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StandaloneMessage);
      }
      if (HasStandaloneEnum) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StandaloneEnum);
      }
      size += repeatedInt32_.CalculateSize(_repeated_repeatedInt32_codec);
      size += repeatedInt64_.CalculateSize(_repeated_repeatedInt64_codec);
      size += repeatedUint32_.CalculateSize(_repeated_repeatedUint32_codec);
      size += repeatedUint64_.CalculateSize(_repeated_repeatedUint64_codec);
      size += repeatedSint32_.CalculateSize(_repeated_repeatedSint32_codec);
      size += repeatedSint64_.CalculateSize(_repeated_repeatedSint64_codec);
      size += repeatedFixed32_.CalculateSize(_repeated_repeatedFixed32_codec);
      size += repeatedFixed64_.CalculateSize(_repeated_repeatedFixed64_codec);
      size += repeatedSfixed32_.CalculateSize(_repeated_repeatedSfixed32_codec);
      size += repeatedSfixed64_.CalculateSize(_repeated_repeatedSfixed64_codec);
      size += repeatedFloat_.CalculateSize(_repeated_repeatedFloat_codec);
      size += repeatedDouble_.CalculateSize(_repeated_repeatedDouble_codec);
      size += repeatedBool_.CalculateSize(_repeated_repeatedBool_codec);
      size += repeatedString_.CalculateSize(_repeated_repeatedString_codec);
      size += repeatedBytes_.CalculateSize(_repeated_repeatedBytes_codec);
      size += repeatedNestedMessage_.CalculateSize(_repeated_repeatedNestedMessage_codec);
      size += repeatedNestedEnum_.CalculateSize(_repeated_repeatedNestedEnum_codec);
      size += repeatedStringPiece_.CalculateSize(_repeated_repeatedStringPiece_codec);
      size += repeatedCord_.CalculateSize(_repeated_repeatedCord_codec);
      size += repeatedLazyMessage_.CalculateSize(_repeated_repeatedLazyMessage_codec);
      size += mapStringString_.CalculateSize(_map_mapStringString_codec);
      size += mapInt64NestedType_.CalculateSize(_map_mapInt64NestedType_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestAllTypes other) {
      if (other == null) {
        return;
      }
      if (other.HasSingleInt32) {
        SingleInt32 = other.SingleInt32;
      }
      if (other.HasSingleInt64) {
        SingleInt64 = other.SingleInt64;
      }
      if (other.HasSingleUint32) {
        SingleUint32 = other.SingleUint32;
      }
      if (other.HasSingleUint64) {
        SingleUint64 = other.SingleUint64;
      }
      if (other.HasSingleSint32) {
        SingleSint32 = other.SingleSint32;
      }
      if (other.HasSingleSint64) {
        SingleSint64 = other.SingleSint64;
      }
      if (other.HasSingleFixed32) {
        SingleFixed32 = other.SingleFixed32;
      }
      if (other.HasSingleFixed64) {
        SingleFixed64 = other.SingleFixed64;
      }
      if (other.HasSingleSfixed32) {
        SingleSfixed32 = other.SingleSfixed32;
      }
      if (other.HasSingleSfixed64) {
        SingleSfixed64 = other.SingleSfixed64;
      }
      if (other.HasSingleFloat) {
        SingleFloat = other.SingleFloat;
      }
      if (other.HasSingleDouble) {
        SingleDouble = other.SingleDouble;
      }
      if (other.HasSingleBool) {
        SingleBool = other.SingleBool;
      }
      if (other.HasSingleString) {
        SingleString = other.SingleString;
      }
      if (other.HasSingleBytes) {
        SingleBytes = other.SingleBytes;
      }
      if (other.singleAny_ != null) {
        if (singleAny_ == null) {
          SingleAny = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        SingleAny.MergeFrom(other.SingleAny);
      }
      if (other.singleDuration_ != null) {
        if (singleDuration_ == null) {
          SingleDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        SingleDuration.MergeFrom(other.SingleDuration);
      }
      if (other.singleTimestamp_ != null) {
        if (singleTimestamp_ == null) {
          SingleTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        SingleTimestamp.MergeFrom(other.SingleTimestamp);
      }
      if (other.singleStruct_ != null) {
        if (singleStruct_ == null) {
          SingleStruct = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        SingleStruct.MergeFrom(other.SingleStruct);
      }
      if (other.singleValue_ != null) {
        if (singleValue_ == null) {
          SingleValue = new global::Google.Protobuf.WellKnownTypes.Value();
        }
        SingleValue.MergeFrom(other.SingleValue);
      }
      if (other.singleInt64Wrapper_ != null) {
        if (singleInt64Wrapper_ == null || other.SingleInt64Wrapper != 0L) {
          SingleInt64Wrapper = other.SingleInt64Wrapper;
        }
      }
      if (other.singleInt32Wrapper_ != null) {
        if (singleInt32Wrapper_ == null || other.SingleInt32Wrapper != 0) {
          SingleInt32Wrapper = other.SingleInt32Wrapper;
        }
      }
      if (other.singleDoubleWrapper_ != null) {
        if (singleDoubleWrapper_ == null || other.SingleDoubleWrapper != 0D) {
          SingleDoubleWrapper = other.SingleDoubleWrapper;
        }
      }
      if (other.singleFloatWrapper_ != null) {
        if (singleFloatWrapper_ == null || other.SingleFloatWrapper != 0F) {
          SingleFloatWrapper = other.SingleFloatWrapper;
        }
      }
      if (other.singleUint64Wrapper_ != null) {
        if (singleUint64Wrapper_ == null || other.SingleUint64Wrapper != 0UL) {
          SingleUint64Wrapper = other.SingleUint64Wrapper;
        }
      }
      if (other.singleUint32Wrapper_ != null) {
        if (singleUint32Wrapper_ == null || other.SingleUint32Wrapper != 0) {
          SingleUint32Wrapper = other.SingleUint32Wrapper;
        }
      }
      if (other.singleStringWrapper_ != null) {
        if (singleStringWrapper_ == null || other.SingleStringWrapper != "") {
          SingleStringWrapper = other.SingleStringWrapper;
        }
      }
      if (other.singleBoolWrapper_ != null) {
        if (singleBoolWrapper_ == null || other.SingleBoolWrapper != false) {
          SingleBoolWrapper = other.SingleBoolWrapper;
        }
      }
      if (other.singleBytesWrapper_ != null) {
        if (singleBytesWrapper_ == null || other.SingleBytesWrapper != pb::ByteString.Empty) {
          SingleBytesWrapper = other.SingleBytesWrapper;
        }
      }
      if (other.listValue_ != null) {
        if (listValue_ == null) {
          ListValue = new global::Google.Protobuf.WellKnownTypes.ListValue();
        }
        ListValue.MergeFrom(other.ListValue);
      }
      if (other.standaloneMessage_ != null) {
        if (standaloneMessage_ == null) {
          StandaloneMessage = new global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage();
        }
        StandaloneMessage.MergeFrom(other.StandaloneMessage);
      }
      if (other.HasStandaloneEnum) {
        StandaloneEnum = other.StandaloneEnum;
      }
      repeatedInt32_.Add(other.repeatedInt32_);
      repeatedInt64_.Add(other.repeatedInt64_);
      repeatedUint32_.Add(other.repeatedUint32_);
      repeatedUint64_.Add(other.repeatedUint64_);
      repeatedSint32_.Add(other.repeatedSint32_);
      repeatedSint64_.Add(other.repeatedSint64_);
      repeatedFixed32_.Add(other.repeatedFixed32_);
      repeatedFixed64_.Add(other.repeatedFixed64_);
      repeatedSfixed32_.Add(other.repeatedSfixed32_);
      repeatedSfixed64_.Add(other.repeatedSfixed64_);
      repeatedFloat_.Add(other.repeatedFloat_);
      repeatedDouble_.Add(other.repeatedDouble_);
      repeatedBool_.Add(other.repeatedBool_);
      repeatedString_.Add(other.repeatedString_);
      repeatedBytes_.Add(other.repeatedBytes_);
      repeatedNestedMessage_.Add(other.repeatedNestedMessage_);
      repeatedNestedEnum_.Add(other.repeatedNestedEnum_);
      repeatedStringPiece_.Add(other.repeatedStringPiece_);
      repeatedCord_.Add(other.repeatedCord_);
      repeatedLazyMessage_.Add(other.repeatedLazyMessage_);
      mapStringString_.Add(other.mapStringString_);
      mapInt64NestedType_.Add(other.mapInt64NestedType_);
      switch (other.NestedTypeCase) {
        case NestedTypeOneofCase.SingleNestedMessage:
          if (SingleNestedMessage == null) {
            SingleNestedMessage = new global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage();
          }
          SingleNestedMessage.MergeFrom(other.SingleNestedMessage);
          break;
        case NestedTypeOneofCase.SingleNestedEnum:
          SingleNestedEnum = other.SingleNestedEnum;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SingleInt32 = input.ReadInt32();
            break;
          }
          case 16: {
            SingleInt64 = input.ReadInt64();
            break;
          }
          case 24: {
            SingleUint32 = input.ReadUInt32();
            break;
          }
          case 32: {
            SingleUint64 = input.ReadUInt64();
            break;
          }
          case 40: {
            SingleSint32 = input.ReadSInt32();
            break;
          }
          case 48: {
            SingleSint64 = input.ReadSInt64();
            break;
          }
          case 61: {
            SingleFixed32 = input.ReadFixed32();
            break;
          }
          case 65: {
            SingleFixed64 = input.ReadFixed64();
            break;
          }
          case 77: {
            SingleSfixed32 = input.ReadSFixed32();
            break;
          }
          case 81: {
            SingleSfixed64 = input.ReadSFixed64();
            break;
          }
          case 93: {
            SingleFloat = input.ReadFloat();
            break;
          }
          case 97: {
            SingleDouble = input.ReadDouble();
            break;
          }
          case 104: {
            SingleBool = input.ReadBool();
            break;
          }
          case 114: {
            SingleString = input.ReadString();
            break;
          }
          case 122: {
            SingleBytes = input.ReadBytes();
            break;
          }
          case 170: {
            global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage subBuilder = new global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage();
            if (nestedTypeCase_ == NestedTypeOneofCase.SingleNestedMessage) {
              subBuilder.MergeFrom(SingleNestedMessage);
            }
            input.ReadMessage(subBuilder);
            SingleNestedMessage = subBuilder;
            break;
          }
          case 176: {
            nestedType_ = input.ReadEnum();
            nestedTypeCase_ = NestedTypeOneofCase.SingleNestedEnum;
            break;
          }
          case 186: {
            if (standaloneMessage_ == null) {
              StandaloneMessage = new global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage();
            }
            input.ReadMessage(StandaloneMessage);
            break;
          }
          case 192: {
            StandaloneEnum = (global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum) input.ReadEnum();
            break;
          }
          case 250:
          case 248: {
            repeatedInt32_.AddEntriesFrom(input, _repeated_repeatedInt32_codec);
            break;
          }
          case 258:
          case 256: {
            repeatedInt64_.AddEntriesFrom(input, _repeated_repeatedInt64_codec);
            break;
          }
          case 266:
          case 264: {
            repeatedUint32_.AddEntriesFrom(input, _repeated_repeatedUint32_codec);
            break;
          }
          case 274:
          case 272: {
            repeatedUint64_.AddEntriesFrom(input, _repeated_repeatedUint64_codec);
            break;
          }
          case 282:
          case 280: {
            repeatedSint32_.AddEntriesFrom(input, _repeated_repeatedSint32_codec);
            break;
          }
          case 290:
          case 288: {
            repeatedSint64_.AddEntriesFrom(input, _repeated_repeatedSint64_codec);
            break;
          }
          case 298:
          case 301: {
            repeatedFixed32_.AddEntriesFrom(input, _repeated_repeatedFixed32_codec);
            break;
          }
          case 306:
          case 305: {
            repeatedFixed64_.AddEntriesFrom(input, _repeated_repeatedFixed64_codec);
            break;
          }
          case 314:
          case 317: {
            repeatedSfixed32_.AddEntriesFrom(input, _repeated_repeatedSfixed32_codec);
            break;
          }
          case 322:
          case 321: {
            repeatedSfixed64_.AddEntriesFrom(input, _repeated_repeatedSfixed64_codec);
            break;
          }
          case 330:
          case 333: {
            repeatedFloat_.AddEntriesFrom(input, _repeated_repeatedFloat_codec);
            break;
          }
          case 338:
          case 337: {
            repeatedDouble_.AddEntriesFrom(input, _repeated_repeatedDouble_codec);
            break;
          }
          case 346:
          case 344: {
            repeatedBool_.AddEntriesFrom(input, _repeated_repeatedBool_codec);
            break;
          }
          case 354: {
            repeatedString_.AddEntriesFrom(input, _repeated_repeatedString_codec);
            break;
          }
          case 362: {
            repeatedBytes_.AddEntriesFrom(input, _repeated_repeatedBytes_codec);
            break;
          }
          case 410: {
            repeatedNestedMessage_.AddEntriesFrom(input, _repeated_repeatedNestedMessage_codec);
            break;
          }
          case 418:
          case 416: {
            repeatedNestedEnum_.AddEntriesFrom(input, _repeated_repeatedNestedEnum_codec);
            break;
          }
          case 426: {
            repeatedStringPiece_.AddEntriesFrom(input, _repeated_repeatedStringPiece_codec);
            break;
          }
          case 434: {
            repeatedCord_.AddEntriesFrom(input, _repeated_repeatedCord_codec);
            break;
          }
          case 442: {
            repeatedLazyMessage_.AddEntriesFrom(input, _repeated_repeatedLazyMessage_codec);
            break;
          }
          case 490: {
            mapStringString_.AddEntriesFrom(input, _map_mapStringString_codec);
            break;
          }
          case 498: {
            mapInt64NestedType_.AddEntriesFrom(input, _map_mapInt64NestedType_codec);
            break;
          }
          case 802: {
            if (singleAny_ == null) {
              SingleAny = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(SingleAny);
            break;
          }
          case 810: {
            if (singleDuration_ == null) {
              SingleDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(SingleDuration);
            break;
          }
          case 818: {
            if (singleTimestamp_ == null) {
              SingleTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(SingleTimestamp);
            break;
          }
          case 826: {
            if (singleStruct_ == null) {
              SingleStruct = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(SingleStruct);
            break;
          }
          case 834: {
            if (singleValue_ == null) {
              SingleValue = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(SingleValue);
            break;
          }
          case 842: {
            long? value = _single_singleInt64Wrapper_codec.Read(input);
            if (singleInt64Wrapper_ == null || value != 0L) {
              SingleInt64Wrapper = value;
            }
            break;
          }
          case 850: {
            int? value = _single_singleInt32Wrapper_codec.Read(input);
            if (singleInt32Wrapper_ == null || value != 0) {
              SingleInt32Wrapper = value;
            }
            break;
          }
          case 858: {
            double? value = _single_singleDoubleWrapper_codec.Read(input);
            if (singleDoubleWrapper_ == null || value != 0D) {
              SingleDoubleWrapper = value;
            }
            break;
          }
          case 866: {
            float? value = _single_singleFloatWrapper_codec.Read(input);
            if (singleFloatWrapper_ == null || value != 0F) {
              SingleFloatWrapper = value;
            }
            break;
          }
          case 874: {
            ulong? value = _single_singleUint64Wrapper_codec.Read(input);
            if (singleUint64Wrapper_ == null || value != 0UL) {
              SingleUint64Wrapper = value;
            }
            break;
          }
          case 882: {
            uint? value = _single_singleUint32Wrapper_codec.Read(input);
            if (singleUint32Wrapper_ == null || value != 0) {
              SingleUint32Wrapper = value;
            }
            break;
          }
          case 890: {
            string value = _single_singleStringWrapper_codec.Read(input);
            if (singleStringWrapper_ == null || value != "") {
              SingleStringWrapper = value;
            }
            break;
          }
          case 898: {
            bool? value = _single_singleBoolWrapper_codec.Read(input);
            if (singleBoolWrapper_ == null || value != false) {
              SingleBoolWrapper = value;
            }
            break;
          }
          case 906: {
            pb::ByteString value = _single_singleBytesWrapper_codec.Read(input);
            if (singleBytesWrapper_ == null || value != pb::ByteString.Empty) {
              SingleBytesWrapper = value;
            }
            break;
          }
          case 914: {
            if (listValue_ == null) {
              ListValue = new global::Google.Protobuf.WellKnownTypes.ListValue();
            }
            input.ReadMessage(ListValue);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SingleInt32 = input.ReadInt32();
            break;
          }
          case 16: {
            SingleInt64 = input.ReadInt64();
            break;
          }
          case 24: {
            SingleUint32 = input.ReadUInt32();
            break;
          }
          case 32: {
            SingleUint64 = input.ReadUInt64();
            break;
          }
          case 40: {
            SingleSint32 = input.ReadSInt32();
            break;
          }
          case 48: {
            SingleSint64 = input.ReadSInt64();
            break;
          }
          case 61: {
            SingleFixed32 = input.ReadFixed32();
            break;
          }
          case 65: {
            SingleFixed64 = input.ReadFixed64();
            break;
          }
          case 77: {
            SingleSfixed32 = input.ReadSFixed32();
            break;
          }
          case 81: {
            SingleSfixed64 = input.ReadSFixed64();
            break;
          }
          case 93: {
            SingleFloat = input.ReadFloat();
            break;
          }
          case 97: {
            SingleDouble = input.ReadDouble();
            break;
          }
          case 104: {
            SingleBool = input.ReadBool();
            break;
          }
          case 114: {
            SingleString = input.ReadString();
            break;
          }
          case 122: {
            SingleBytes = input.ReadBytes();
            break;
          }
          case 170: {
            global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage subBuilder = new global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage();
            if (nestedTypeCase_ == NestedTypeOneofCase.SingleNestedMessage) {
              subBuilder.MergeFrom(SingleNestedMessage);
            }
            input.ReadMessage(subBuilder);
            SingleNestedMessage = subBuilder;
            break;
          }
          case 176: {
            nestedType_ = input.ReadEnum();
            nestedTypeCase_ = NestedTypeOneofCase.SingleNestedEnum;
            break;
          }
          case 186: {
            if (standaloneMessage_ == null) {
              StandaloneMessage = new global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedMessage();
            }
            input.ReadMessage(StandaloneMessage);
            break;
          }
          case 192: {
            StandaloneEnum = (global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Types.NestedEnum) input.ReadEnum();
            break;
          }
          case 250:
          case 248: {
            repeatedInt32_.AddEntriesFrom(ref input, _repeated_repeatedInt32_codec);
            break;
          }
          case 258:
          case 256: {
            repeatedInt64_.AddEntriesFrom(ref input, _repeated_repeatedInt64_codec);
            break;
          }
          case 266:
          case 264: {
            repeatedUint32_.AddEntriesFrom(ref input, _repeated_repeatedUint32_codec);
            break;
          }
          case 274:
          case 272: {
            repeatedUint64_.AddEntriesFrom(ref input, _repeated_repeatedUint64_codec);
            break;
          }
          case 282:
          case 280: {
            repeatedSint32_.AddEntriesFrom(ref input, _repeated_repeatedSint32_codec);
            break;
          }
          case 290:
          case 288: {
            repeatedSint64_.AddEntriesFrom(ref input, _repeated_repeatedSint64_codec);
            break;
          }
          case 298:
          case 301: {
            repeatedFixed32_.AddEntriesFrom(ref input, _repeated_repeatedFixed32_codec);
            break;
          }
          case 306:
          case 305: {
            repeatedFixed64_.AddEntriesFrom(ref input, _repeated_repeatedFixed64_codec);
            break;
          }
          case 314:
          case 317: {
            repeatedSfixed32_.AddEntriesFrom(ref input, _repeated_repeatedSfixed32_codec);
            break;
          }
          case 322:
          case 321: {
            repeatedSfixed64_.AddEntriesFrom(ref input, _repeated_repeatedSfixed64_codec);
            break;
          }
          case 330:
          case 333: {
            repeatedFloat_.AddEntriesFrom(ref input, _repeated_repeatedFloat_codec);
            break;
          }
          case 338:
          case 337: {
            repeatedDouble_.AddEntriesFrom(ref input, _repeated_repeatedDouble_codec);
            break;
          }
          case 346:
          case 344: {
            repeatedBool_.AddEntriesFrom(ref input, _repeated_repeatedBool_codec);
            break;
          }
          case 354: {
            repeatedString_.AddEntriesFrom(ref input, _repeated_repeatedString_codec);
            break;
          }
          case 362: {
            repeatedBytes_.AddEntriesFrom(ref input, _repeated_repeatedBytes_codec);
            break;
          }
          case 410: {
            repeatedNestedMessage_.AddEntriesFrom(ref input, _repeated_repeatedNestedMessage_codec);
            break;
          }
          case 418:
          case 416: {
            repeatedNestedEnum_.AddEntriesFrom(ref input, _repeated_repeatedNestedEnum_codec);
            break;
          }
          case 426: {
            repeatedStringPiece_.AddEntriesFrom(ref input, _repeated_repeatedStringPiece_codec);
            break;
          }
          case 434: {
            repeatedCord_.AddEntriesFrom(ref input, _repeated_repeatedCord_codec);
            break;
          }
          case 442: {
            repeatedLazyMessage_.AddEntriesFrom(ref input, _repeated_repeatedLazyMessage_codec);
            break;
          }
          case 490: {
            mapStringString_.AddEntriesFrom(ref input, _map_mapStringString_codec);
            break;
          }
          case 498: {
            mapInt64NestedType_.AddEntriesFrom(ref input, _map_mapInt64NestedType_codec);
            break;
          }
          case 802: {
            if (singleAny_ == null) {
              SingleAny = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(SingleAny);
            break;
          }
          case 810: {
            if (singleDuration_ == null) {
              SingleDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(SingleDuration);
            break;
          }
          case 818: {
            if (singleTimestamp_ == null) {
              SingleTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(SingleTimestamp);
            break;
          }
          case 826: {
            if (singleStruct_ == null) {
              SingleStruct = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(SingleStruct);
            break;
          }
          case 834: {
            if (singleValue_ == null) {
              SingleValue = new global::Google.Protobuf.WellKnownTypes.Value();
            }
            input.ReadMessage(SingleValue);
            break;
          }
          case 842: {
            long? value = _single_singleInt64Wrapper_codec.Read(ref input);
            if (singleInt64Wrapper_ == null || value != 0L) {
              SingleInt64Wrapper = value;
            }
            break;
          }
          case 850: {
            int? value = _single_singleInt32Wrapper_codec.Read(ref input);
            if (singleInt32Wrapper_ == null || value != 0) {
              SingleInt32Wrapper = value;
            }
            break;
          }
          case 858: {
            double? value = _single_singleDoubleWrapper_codec.Read(ref input);
            if (singleDoubleWrapper_ == null || value != 0D) {
              SingleDoubleWrapper = value;
            }
            break;
          }
          case 866: {
            float? value = _single_singleFloatWrapper_codec.Read(ref input);
            if (singleFloatWrapper_ == null || value != 0F) {
              SingleFloatWrapper = value;
            }
            break;
          }
          case 874: {
            ulong? value = _single_singleUint64Wrapper_codec.Read(ref input);
            if (singleUint64Wrapper_ == null || value != 0UL) {
              SingleUint64Wrapper = value;
            }
            break;
          }
          case 882: {
            uint? value = _single_singleUint32Wrapper_codec.Read(ref input);
            if (singleUint32Wrapper_ == null || value != 0) {
              SingleUint32Wrapper = value;
            }
            break;
          }
          case 890: {
            string value = _single_singleStringWrapper_codec.Read(ref input);
            if (singleStringWrapper_ == null || value != "") {
              SingleStringWrapper = value;
            }
            break;
          }
          case 898: {
            bool? value = _single_singleBoolWrapper_codec.Read(ref input);
            if (singleBoolWrapper_ == null || value != false) {
              SingleBoolWrapper = value;
            }
            break;
          }
          case 906: {
            pb::ByteString value = _single_singleBytesWrapper_codec.Read(ref input);
            if (singleBytesWrapper_ == null || value != pb::ByteString.Empty) {
              SingleBytesWrapper = value;
            }
            break;
          }
          case 914: {
            if (listValue_ == null) {
              ListValue = new global::Google.Protobuf.WellKnownTypes.ListValue();
            }
            input.ReadMessage(ListValue);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TestAllTypes message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum NestedEnum {
        [pbr::OriginalName("FOO")] Foo = 0,
        [pbr::OriginalName("BAR")] Bar = 1,
        [pbr::OriginalName("BAZ")] Baz = 2,
      }

      public sealed partial class NestedMessage : pb::IMessage<NestedMessage>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<NestedMessage> _parser = new pb::MessageParser<NestedMessage>(() => new NestedMessage());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NestedMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessage(NestedMessage other) : this() {
          _hasBits0 = other._hasBits0;
          bb_ = other.bb_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NestedMessage Clone() {
          return new NestedMessage(this);
        }

        /// <summary>Field number for the "bb" field.</summary>
        public const int BbFieldNumber = 1;
        private readonly static int BbDefaultValue = 0;

        private int bb_;
        /// <summary>
        /// The field name "b" fails to compile in proto1 because it conflicts with
        /// a local variable named "b" in one of the generated methods.
        /// This file needs to compile in proto1 to test backwards-compatibility.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Bb {
          get { if ((_hasBits0 & 1) != 0) { return bb_; } else { return BbDefaultValue; } }
          set {
            _hasBits0 |= 1;
            bb_ = value;
          }
        }
        /// <summary>Gets whether the "bb" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBb {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "bb" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBb() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NestedMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NestedMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Bb != other.Bb) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasBb) hash ^= Bb.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasBb) {
            output.WriteRawTag(8);
            output.WriteInt32(Bb);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasBb) {
            output.WriteRawTag(8);
            output.WriteInt32(Bb);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasBb) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bb);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NestedMessage other) {
          if (other == null) {
            return;
          }
          if (other.HasBb) {
            Bb = other.Bb;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Bb = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Bb = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// This proto includes a recursively nested message.
  /// </summary>
  public sealed partial class NestedTestAllTypes : pb::IMessage<NestedTestAllTypes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NestedTestAllTypes> _parser = new pb::MessageParser<NestedTestAllTypes>(() => new NestedTestAllTypes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NestedTestAllTypes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Expr.Test.V1.Proto2.TestAllTypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedTestAllTypes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedTestAllTypes(NestedTestAllTypes other) : this() {
      child_ = other.child_ != null ? other.child_.Clone() : null;
      payload_ = other.payload_ != null ? other.payload_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NestedTestAllTypes Clone() {
      return new NestedTestAllTypes(this);
    }

    /// <summary>Field number for the "child" field.</summary>
    public const int ChildFieldNumber = 1;
    private global::Google.Api.Expr.Test.V1.Proto2.NestedTestAllTypes child_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.Expr.Test.V1.Proto2.NestedTestAllTypes Child {
      get { return child_; }
      set {
        child_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NestedTestAllTypes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NestedTestAllTypes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Child, other.Child)) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (child_ != null) hash ^= Child.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (child_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Child);
      }
      if (payload_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (child_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Child);
      }
      if (payload_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (child_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Child);
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NestedTestAllTypes other) {
      if (other == null) {
        return;
      }
      if (other.child_ != null) {
        if (child_ == null) {
          Child = new global::Google.Api.Expr.Test.V1.Proto2.NestedTestAllTypes();
        }
        Child.MergeFrom(other.Child);
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          Payload = new global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes();
        }
        Payload.MergeFrom(other.Payload);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (child_ == null) {
              Child = new global::Google.Api.Expr.Test.V1.Proto2.NestedTestAllTypes();
            }
            input.ReadMessage(Child);
            break;
          }
          case 18: {
            if (payload_ == null) {
              Payload = new global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes();
            }
            input.ReadMessage(Payload);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (child_ == null) {
              Child = new global::Google.Api.Expr.Test.V1.Proto2.NestedTestAllTypes();
            }
            input.ReadMessage(Child);
            break;
          }
          case 18: {
            if (payload_ == null) {
              Payload = new global::Google.Api.Expr.Test.V1.Proto2.TestAllTypes();
            }
            input.ReadMessage(Payload);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// This proto has a required field.
  /// </summary>
  public sealed partial class TestRequired : pb::IMessage<TestRequired>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TestRequired> _parser = new pb::MessageParser<TestRequired>(() => new TestRequired());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestRequired> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.Expr.Test.V1.Proto2.TestAllTypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRequired() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRequired(TestRequired other) : this() {
      _hasBits0 = other._hasBits0;
      requiredInt32_ = other.requiredInt32_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestRequired Clone() {
      return new TestRequired(this);
    }

    /// <summary>Field number for the "required_int32" field.</summary>
    public const int RequiredInt32FieldNumber = 1;
    private readonly static int RequiredInt32DefaultValue = 0;

    private int requiredInt32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequiredInt32 {
      get { if ((_hasBits0 & 1) != 0) { return requiredInt32_; } else { return RequiredInt32DefaultValue; } }
      set {
        _hasBits0 |= 1;
        requiredInt32_ = value;
      }
    }
    /// <summary>Gets whether the "required_int32" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequiredInt32 {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "required_int32" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequiredInt32() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestRequired);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestRequired other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequiredInt32 != other.RequiredInt32) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRequiredInt32) hash ^= RequiredInt32.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRequiredInt32) {
        output.WriteRawTag(8);
        output.WriteInt32(RequiredInt32);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRequiredInt32) {
        output.WriteRawTag(8);
        output.WriteInt32(RequiredInt32);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRequiredInt32) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequiredInt32);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestRequired other) {
      if (other == null) {
        return;
      }
      if (other.HasRequiredInt32) {
        RequiredInt32 = other.RequiredInt32;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequiredInt32 = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RequiredInt32 = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
