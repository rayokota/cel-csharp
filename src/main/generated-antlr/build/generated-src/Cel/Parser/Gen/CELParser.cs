//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/ryokota/code/personal/cel-csharp/src/main/generated-antlr/CEL.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Cel.Parser.Gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class CELParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQUALS=1, NOT_EQUALS=2, IN=3, LESS=4, LESS_EQUALS=5, GREATER_EQUALS=6, 
		GREATER=7, LOGICAL_AND=8, LOGICAL_OR=9, LBRACKET=10, RPRACKET=11, LBRACE=12, 
		RBRACE=13, LPAREN=14, RPAREN=15, DOT=16, COMMA=17, MINUS=18, EXCLAM=19, 
		QUESTIONMARK=20, COLON=21, PLUS=22, STAR=23, SLASH=24, PERCENT=25, TRUE=26, 
		FALSE=27, NULL=28, WHITESPACE=29, COMMENT=30, NUM_FLOAT=31, NUM_INT=32, 
		NUM_UINT=33, STRING=34, BYTES=35, IDENTIFIER=36;
	public const int
		RULE_start = 0, RULE_expr = 1, RULE_conditionalOr = 2, RULE_conditionalAnd = 3, 
		RULE_relation = 4, RULE_calc = 5, RULE_unary = 6, RULE_member = 7, RULE_primary = 8, 
		RULE_exprList = 9, RULE_fieldInitializerList = 10, RULE_mapInitializerList = 11, 
		RULE_literal = 12;
	public static readonly string[] ruleNames = {
		"start", "expr", "conditionalOr", "conditionalAnd", "relation", "calc", 
		"unary", "member", "primary", "exprList", "fieldInitializerList", "mapInitializerList", 
		"literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'=='", "'!='", "'in'", "'<'", "'<='", "'>='", "'>'", "'&&'", "'||'", 
		"'['", "']'", "'{'", "'}'", "'('", "')'", "'.'", "','", "'-'", "'!'", 
		"'?'", "':'", "'+'", "'*'", "'/'", "'%'", "'true'", "'false'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQUALS", "NOT_EQUALS", "IN", "LESS", "LESS_EQUALS", "GREATER_EQUALS", 
		"GREATER", "LOGICAL_AND", "LOGICAL_OR", "LBRACKET", "RPRACKET", "LBRACE", 
		"RBRACE", "LPAREN", "RPAREN", "DOT", "COMMA", "MINUS", "EXCLAM", "QUESTIONMARK", 
		"COLON", "PLUS", "STAR", "SLASH", "PERCENT", "TRUE", "FALSE", "NULL", 
		"WHITESPACE", "COMMENT", "NUM_FLOAT", "NUM_INT", "NUM_UINT", "STRING", 
		"BYTES", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CEL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CELParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CELParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CELParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public ExprContext e;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CELParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			_localctx.e = expr();
			State = 27;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ConditionalOrContext e;
		public IToken op;
		public ConditionalOrContext e1;
		public ExprContext e2;
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrContext[] conditionalOr() {
			return GetRuleContexts<ConditionalOrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrContext conditionalOr(int i) {
			return GetRuleContext<ConditionalOrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CELParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK() { return GetToken(CELParser.QUESTIONMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			_localctx.e = conditionalOr();
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTIONMARK) {
				{
				State = 30;
				_localctx.op = Match(QUESTIONMARK);
				State = 31;
				_localctx.e1 = conditionalOr();
				State = 32;
				Match(COLON);
				State = 33;
				_localctx.e2 = expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrContext : ParserRuleContext {
		public ConditionalAndContext e;
		public IToken s9;
		public IList<IToken> _ops = new List<IToken>();
		public ConditionalAndContext _conditionalAnd;
		public IList<ConditionalAndContext> _e1 = new List<ConditionalAndContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndContext[] conditionalAnd() {
			return GetRuleContexts<ConditionalAndContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndContext conditionalAnd(int i) {
			return GetRuleContext<ConditionalAndContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOGICAL_OR() { return GetTokens(CELParser.LOGICAL_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR(int i) {
			return GetToken(CELParser.LOGICAL_OR, i);
		}
		public ConditionalOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrContext conditionalOr() {
		ConditionalOrContext _localctx = new ConditionalOrContext(Context, State);
		EnterRule(_localctx, 4, RULE_conditionalOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			_localctx.e = conditionalAnd();
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOGICAL_OR) {
				{
				{
				State = 38;
				_localctx.s9 = Match(LOGICAL_OR);
				_localctx._ops.Add(_localctx.s9);
				State = 39;
				_localctx._conditionalAnd = conditionalAnd();
				_localctx._e1.Add(_localctx._conditionalAnd);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndContext : ParserRuleContext {
		public RelationContext e;
		public IToken s8;
		public IList<IToken> _ops = new List<IToken>();
		public RelationContext _relation;
		public IList<RelationContext> _e1 = new List<RelationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext[] relation() {
			return GetRuleContexts<RelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation(int i) {
			return GetRuleContext<RelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOGICAL_AND() { return GetTokens(CELParser.LOGICAL_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND(int i) {
			return GetToken(CELParser.LOGICAL_AND, i);
		}
		public ConditionalAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndContext conditionalAnd() {
		ConditionalAndContext _localctx = new ConditionalAndContext(Context, State);
		EnterRule(_localctx, 6, RULE_conditionalAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			_localctx.e = relation(0);
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOGICAL_AND) {
				{
				{
				State = 46;
				_localctx.s8 = Match(LOGICAL_AND);
				_localctx._ops.Add(_localctx.s8);
				State = 47;
				_localctx._relation = relation(0);
				_localctx._e1.Add(_localctx._relation);
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public CalcContext calc() {
			return GetRuleContext<CalcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext[] relation() {
			return GetRuleContexts<RelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation(int i) {
			return GetRuleContext<RelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(CELParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(CELParser.LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(CELParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(CELParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(CELParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(CELParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CELParser.IN, 0); }
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		return relation(0);
	}

	private RelationContext relation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationContext _localctx = new RelationContext(Context, _parentState);
		RelationContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_relation, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 54;
			calc(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 61;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RelationContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_relation);
					State = 56;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 57;
					_localctx.op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUALS) | (1L << NOT_EQUALS) | (1L << IN) | (1L << LESS) | (1L << LESS_EQUALS) | (1L << GREATER_EQUALS) | (1L << GREATER))) != 0)) ) {
						_localctx.op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 58;
					relation(2);
					}
					} 
				}
				State = 63;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CalcContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CalcContext[] calc() {
			return GetRuleContexts<CalcContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CalcContext calc(int i) {
			return GetRuleContext<CalcContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(CELParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(CELParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(CELParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(CELParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CELParser.MINUS, 0); }
		public CalcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalcContext calc() {
		return calc(0);
	}

	private CalcContext calc(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CalcContext _localctx = new CalcContext(Context, _parentState);
		CalcContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_calc, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 65;
			unary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 75;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 73;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new CalcContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_calc);
						State = 67;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 68;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 69;
						calc(3);
						}
						break;
					case 2:
						{
						_localctx = new CalcContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_calc);
						State = 70;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 71;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 72;
						calc(2);
						}
						break;
					}
					} 
				}
				State = 77;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
	 
		public UnaryContext() { }
		public virtual void CopyFrom(UnaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalNotContext : UnaryContext {
		public IToken s19;
		public IList<IToken> _ops = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLAM() { return GetTokens(CELParser.EXCLAM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAM(int i) {
			return GetToken(CELParser.EXCLAM, i);
		}
		public LogicalNotContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberExprContext : UnaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public MemberExprContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : UnaryContext {
		public IToken s18;
		public IList<IToken> _ops = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(CELParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(CELParser.MINUS, i);
		}
		public NegateContext(UnaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 12, RULE_unary);
		int _la;
		try {
			int _alt;
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new MemberExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				member(0);
				}
				break;
			case 2:
				_localctx = new LogicalNotContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 79;
					((LogicalNotContext)_localctx).s19 = Match(EXCLAM);
					((LogicalNotContext)_localctx)._ops.Add(((LogicalNotContext)_localctx).s19);
					}
					}
					State = 82;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EXCLAM );
				State = 84;
				member(0);
				}
				break;
			case 3:
				_localctx = new NegateContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 86;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 85;
						((NegateContext)_localctx).s18 = Match(MINUS);
						((NegateContext)_localctx)._ops.Add(((NegateContext)_localctx).s18);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 88;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 90;
				member(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectOrCallContext : MemberContext {
		public IToken op;
		public IToken id;
		public IToken open;
		public ExprListContext args;
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(CELParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CELParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CELParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CELParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public SelectOrCallContext(MemberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectOrCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExprContext : MemberContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExprContext(MemberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexContext : MemberContext {
		public IToken op;
		public ExprContext index;
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRACKET() { return GetToken(CELParser.RPRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(CELParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IndexContext(MemberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateMessageContext : MemberContext {
		public IToken op;
		public FieldInitializerListContext entries;
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CELParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CELParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CELParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializerListContext fieldInitializerList() {
			return GetRuleContext<FieldInitializerListContext>(0);
		}
		public CreateMessageContext(MemberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateMessage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		return member(0);
	}

	private MemberContext member(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MemberContext _localctx = new MemberContext(Context, _parentState);
		MemberContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_member, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryExprContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 94;
			primary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 122;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 120;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new SelectOrCallContext(new MemberContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_member);
						State = 96;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 97;
						((SelectOrCallContext)_localctx).op = Match(DOT);
						State = 98;
						((SelectOrCallContext)_localctx).id = Match(IDENTIFIER);
						State = 104;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
						case 1:
							{
							State = 99;
							((SelectOrCallContext)_localctx).open = Match(LPAREN);
							State = 101;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACKET) | (1L << LBRACE) | (1L << LPAREN) | (1L << DOT) | (1L << MINUS) | (1L << EXCLAM) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << NUM_FLOAT) | (1L << NUM_INT) | (1L << NUM_UINT) | (1L << STRING) | (1L << BYTES) | (1L << IDENTIFIER))) != 0)) {
								{
								State = 100;
								((SelectOrCallContext)_localctx).args = exprList();
								}
							}

							State = 103;
							Match(RPAREN);
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new IndexContext(new MemberContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_member);
						State = 106;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 107;
						((IndexContext)_localctx).op = Match(LBRACKET);
						State = 108;
						((IndexContext)_localctx).index = expr();
						State = 109;
						Match(RPRACKET);
						}
						break;
					case 3:
						{
						_localctx = new CreateMessageContext(new MemberContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_member);
						State = 111;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 112;
						((CreateMessageContext)_localctx).op = Match(LBRACE);
						State = 114;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==IDENTIFIER) {
							{
							State = 113;
							((CreateMessageContext)_localctx).entries = fieldInitializerList();
							}
						}

						State = 117;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 116;
							Match(COMMA);
							}
						}

						State = 119;
						Match(RBRACE);
						}
						break;
					}
					} 
				}
				State = 124;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CreateListContext : PrimaryContext {
		public IToken op;
		public ExprListContext elems;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRACKET() { return GetToken(CELParser.RPRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(CELParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CELParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public CreateListContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateStructContext : PrimaryContext {
		public IToken op;
		public MapInitializerListContext entries;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CELParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CELParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(CELParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapInitializerListContext mapInitializerList() {
			return GetRuleContext<MapInitializerListContext>(0);
		}
		public CreateStructContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantLiteralContext : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ConstantLiteralContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedContext : PrimaryContext {
		public ExprContext e;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CELParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CELParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NestedContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentOrGlobalCallContext : PrimaryContext {
		public IToken leadingDot;
		public IToken id;
		public IToken op;
		public ExprListContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CELParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CELParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(CELParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CELParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public IdentOrGlobalCallContext(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentOrGlobalCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 16, RULE_primary);
		int _la;
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
			case IDENTIFIER:
				_localctx = new IdentOrGlobalCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 125;
					((IdentOrGlobalCallContext)_localctx).leadingDot = Match(DOT);
					}
				}

				State = 128;
				((IdentOrGlobalCallContext)_localctx).id = Match(IDENTIFIER);
				State = 134;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 129;
					((IdentOrGlobalCallContext)_localctx).op = Match(LPAREN);
					State = 131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACKET) | (1L << LBRACE) | (1L << LPAREN) | (1L << DOT) | (1L << MINUS) | (1L << EXCLAM) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << NUM_FLOAT) | (1L << NUM_INT) | (1L << NUM_UINT) | (1L << STRING) | (1L << BYTES) | (1L << IDENTIFIER))) != 0)) {
						{
						State = 130;
						((IdentOrGlobalCallContext)_localctx).args = exprList();
						}
					}

					State = 133;
					Match(RPAREN);
					}
					break;
				}
				}
				break;
			case LPAREN:
				_localctx = new NestedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				Match(LPAREN);
				State = 137;
				((NestedContext)_localctx).e = expr();
				State = 138;
				Match(RPAREN);
				}
				break;
			case LBRACKET:
				_localctx = new CreateListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 140;
				((CreateListContext)_localctx).op = Match(LBRACKET);
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACKET) | (1L << LBRACE) | (1L << LPAREN) | (1L << DOT) | (1L << MINUS) | (1L << EXCLAM) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << NUM_FLOAT) | (1L << NUM_INT) | (1L << NUM_UINT) | (1L << STRING) | (1L << BYTES) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 141;
					((CreateListContext)_localctx).elems = exprList();
					}
				}

				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 144;
					Match(COMMA);
					}
				}

				State = 147;
				Match(RPRACKET);
				}
				break;
			case LBRACE:
				_localctx = new CreateStructContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 148;
				((CreateStructContext)_localctx).op = Match(LBRACE);
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACKET) | (1L << LBRACE) | (1L << LPAREN) | (1L << DOT) | (1L << MINUS) | (1L << EXCLAM) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << NUM_FLOAT) | (1L << NUM_INT) | (1L << NUM_UINT) | (1L << STRING) | (1L << BYTES) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 149;
					((CreateStructContext)_localctx).entries = mapInitializerList();
					}
				}

				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 152;
					Match(COMMA);
					}
				}

				State = 155;
				Match(RBRACE);
				}
				break;
			case MINUS:
			case TRUE:
			case FALSE:
			case NULL:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_UINT:
			case STRING:
			case BYTES:
				_localctx = new ConstantLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 156;
				literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		public ExprContext _expr;
		public IList<ExprContext> _e = new List<ExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CELParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CELParser.COMMA, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 18, RULE_exprList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			_localctx._expr = expr();
			_localctx._e.Add(_localctx._expr);
			State = 164;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 160;
					Match(COMMA);
					State = 161;
					_localctx._expr = expr();
					_localctx._e.Add(_localctx._expr);
					}
					} 
				}
				State = 166;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldInitializerListContext : ParserRuleContext {
		public IToken _IDENTIFIER;
		public IList<IToken> _fields = new List<IToken>();
		public IToken s21;
		public IList<IToken> _cols = new List<IToken>();
		public ExprContext _expr;
		public IList<ExprContext> _values = new List<ExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CELParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CELParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(CELParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(CELParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CELParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CELParser.COMMA, i);
		}
		public FieldInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldInitializerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldInitializerListContext fieldInitializerList() {
		FieldInitializerListContext _localctx = new FieldInitializerListContext(Context, State);
		EnterRule(_localctx, 20, RULE_fieldInitializerList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			_localctx._IDENTIFIER = Match(IDENTIFIER);
			_localctx._fields.Add(_localctx._IDENTIFIER);
			State = 168;
			_localctx.s21 = Match(COLON);
			_localctx._cols.Add(_localctx.s21);
			State = 169;
			_localctx._expr = expr();
			_localctx._values.Add(_localctx._expr);
			State = 176;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 170;
					Match(COMMA);
					State = 171;
					_localctx._IDENTIFIER = Match(IDENTIFIER);
					_localctx._fields.Add(_localctx._IDENTIFIER);
					State = 172;
					_localctx.s21 = Match(COLON);
					_localctx._cols.Add(_localctx.s21);
					State = 173;
					_localctx._expr = expr();
					_localctx._values.Add(_localctx._expr);
					}
					} 
				}
				State = 178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapInitializerListContext : ParserRuleContext {
		public ExprContext _expr;
		public IList<ExprContext> _keys = new List<ExprContext>();
		public IToken s21;
		public IList<IToken> _cols = new List<IToken>();
		public IList<ExprContext> _values = new List<ExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(CELParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(CELParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CELParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CELParser.COMMA, i);
		}
		public MapInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapInitializerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapInitializerListContext mapInitializerList() {
		MapInitializerListContext _localctx = new MapInitializerListContext(Context, State);
		EnterRule(_localctx, 22, RULE_mapInitializerList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			_localctx._expr = expr();
			_localctx._keys.Add(_localctx._expr);
			State = 180;
			_localctx.s21 = Match(COLON);
			_localctx._cols.Add(_localctx.s21);
			State = 181;
			_localctx._expr = expr();
			_localctx._values.Add(_localctx._expr);
			State = 189;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 182;
					Match(COMMA);
					State = 183;
					_localctx._expr = expr();
					_localctx._keys.Add(_localctx._expr);
					State = 184;
					_localctx.s21 = Match(COLON);
					_localctx._cols.Add(_localctx.s21);
					State = 185;
					_localctx._expr = expr();
					_localctx._values.Add(_localctx._expr);
					}
					} 
				}
				State = 191;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BytesContext : LiteralContext {
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES() { return GetToken(CELParser.BYTES, 0); }
		public BytesContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBytes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UintContext : LiteralContext {
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_UINT() { return GetToken(CELParser.NUM_UINT, 0); }
		public UintContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullContext : LiteralContext {
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(CELParser.NULL, 0); }
		public NullContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolFalseContext : LiteralContext {
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(CELParser.FALSE, 0); }
		public BoolFalseContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : LiteralContext {
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CELParser.STRING, 0); }
		public StringContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleContext : LiteralContext {
		public IToken sign;
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_FLOAT() { return GetToken(CELParser.NUM_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CELParser.MINUS, 0); }
		public DoubleContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolTrueContext : LiteralContext {
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(CELParser.TRUE, 0); }
		public BoolTrueContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : LiteralContext {
		public IToken sign;
		public IToken tok;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_INT() { return GetToken(CELParser.NUM_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CELParser.MINUS, 0); }
		public IntContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICELVisitor<TResult> typedVisitor = visitor as ICELVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 24, RULE_literal);
		int _la;
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 192;
					((IntContext)_localctx).sign = Match(MINUS);
					}
				}

				State = 195;
				((IntContext)_localctx).tok = Match(NUM_INT);
				}
				break;
			case 2:
				_localctx = new UintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 196;
				((UintContext)_localctx).tok = Match(NUM_UINT);
				}
				break;
			case 3:
				_localctx = new DoubleContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 197;
					((DoubleContext)_localctx).sign = Match(MINUS);
					}
				}

				State = 200;
				((DoubleContext)_localctx).tok = Match(NUM_FLOAT);
				}
				break;
			case 4:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 201;
				((StringContext)_localctx).tok = Match(STRING);
				}
				break;
			case 5:
				_localctx = new BytesContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 202;
				((BytesContext)_localctx).tok = Match(BYTES);
				}
				break;
			case 6:
				_localctx = new BoolTrueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 203;
				((BoolTrueContext)_localctx).tok = Match(TRUE);
				}
				break;
			case 7:
				_localctx = new BoolFalseContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 204;
				((BoolFalseContext)_localctx).tok = Match(FALSE);
				}
				break;
			case 8:
				_localctx = new NullContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 205;
				((NullContext)_localctx).tok = Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return relation_sempred((RelationContext)_localctx, predIndex);
		case 5: return calc_sempred((CalcContext)_localctx, predIndex);
		case 7: return member_sempred((MemberContext)_localctx, predIndex);
		}
		return true;
	}
	private bool relation_sempred(RelationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool calc_sempred(CalcContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool member_sempred(MemberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,36,209,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,1,1,3,1,36,8,1,1,2,1,2,1,2,5,2,41,8,2,10,2,12,2,44,9,2,1,3,
		1,3,1,3,5,3,49,8,3,10,3,12,3,52,9,3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,60,8,4,
		10,4,12,4,63,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,74,8,5,10,5,12,
		5,77,9,5,1,6,1,6,4,6,81,8,6,11,6,12,6,82,1,6,1,6,4,6,87,8,6,11,6,12,6,
		88,1,6,3,6,92,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,102,8,7,1,7,3,7,
		105,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,115,8,7,1,7,3,7,118,8,7,1,
		7,5,7,121,8,7,10,7,12,7,124,9,7,1,8,3,8,127,8,8,1,8,1,8,1,8,3,8,132,8,
		8,1,8,3,8,135,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,143,8,8,1,8,3,8,146,8,8,
		1,8,1,8,1,8,3,8,151,8,8,1,8,3,8,154,8,8,1,8,1,8,3,8,158,8,8,1,9,1,9,1,
		9,5,9,163,8,9,10,9,12,9,166,9,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,
		175,8,10,10,10,12,10,178,9,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		5,11,188,8,11,10,11,12,11,191,9,11,1,12,3,12,194,8,12,1,12,1,12,1,12,3,
		12,199,8,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,207,8,12,1,12,0,3,8,10,
		14,13,0,2,4,6,8,10,12,14,16,18,20,22,24,0,3,1,0,1,7,1,0,23,25,2,0,18,18,
		22,22,235,0,26,1,0,0,0,2,29,1,0,0,0,4,37,1,0,0,0,6,45,1,0,0,0,8,53,1,0,
		0,0,10,64,1,0,0,0,12,91,1,0,0,0,14,93,1,0,0,0,16,157,1,0,0,0,18,159,1,
		0,0,0,20,167,1,0,0,0,22,179,1,0,0,0,24,206,1,0,0,0,26,27,3,2,1,0,27,28,
		5,0,0,1,28,1,1,0,0,0,29,35,3,4,2,0,30,31,5,20,0,0,31,32,3,4,2,0,32,33,
		5,21,0,0,33,34,3,2,1,0,34,36,1,0,0,0,35,30,1,0,0,0,35,36,1,0,0,0,36,3,
		1,0,0,0,37,42,3,6,3,0,38,39,5,9,0,0,39,41,3,6,3,0,40,38,1,0,0,0,41,44,
		1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,5,1,0,0,0,44,42,1,0,0,0,45,50,3,
		8,4,0,46,47,5,8,0,0,47,49,3,8,4,0,48,46,1,0,0,0,49,52,1,0,0,0,50,48,1,
		0,0,0,50,51,1,0,0,0,51,7,1,0,0,0,52,50,1,0,0,0,53,54,6,4,-1,0,54,55,3,
		10,5,0,55,61,1,0,0,0,56,57,10,1,0,0,57,58,7,0,0,0,58,60,3,8,4,2,59,56,
		1,0,0,0,60,63,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,9,1,0,0,0,63,61,1,
		0,0,0,64,65,6,5,-1,0,65,66,3,12,6,0,66,75,1,0,0,0,67,68,10,2,0,0,68,69,
		7,1,0,0,69,74,3,10,5,3,70,71,10,1,0,0,71,72,7,2,0,0,72,74,3,10,5,2,73,
		67,1,0,0,0,73,70,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,
		11,1,0,0,0,77,75,1,0,0,0,78,92,3,14,7,0,79,81,5,19,0,0,80,79,1,0,0,0,81,
		82,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,84,1,0,0,0,84,92,3,14,7,0,85,
		87,5,18,0,0,86,85,1,0,0,0,87,88,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,
		90,1,0,0,0,90,92,3,14,7,0,91,78,1,0,0,0,91,80,1,0,0,0,91,86,1,0,0,0,92,
		13,1,0,0,0,93,94,6,7,-1,0,94,95,3,16,8,0,95,122,1,0,0,0,96,97,10,3,0,0,
		97,98,5,16,0,0,98,104,5,36,0,0,99,101,5,14,0,0,100,102,3,18,9,0,101,100,
		1,0,0,0,101,102,1,0,0,0,102,103,1,0,0,0,103,105,5,15,0,0,104,99,1,0,0,
		0,104,105,1,0,0,0,105,121,1,0,0,0,106,107,10,2,0,0,107,108,5,10,0,0,108,
		109,3,2,1,0,109,110,5,11,0,0,110,121,1,0,0,0,111,112,10,1,0,0,112,114,
		5,12,0,0,113,115,3,20,10,0,114,113,1,0,0,0,114,115,1,0,0,0,115,117,1,0,
		0,0,116,118,5,17,0,0,117,116,1,0,0,0,117,118,1,0,0,0,118,119,1,0,0,0,119,
		121,5,13,0,0,120,96,1,0,0,0,120,106,1,0,0,0,120,111,1,0,0,0,121,124,1,
		0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,15,1,0,0,0,124,122,1,0,0,0,125,
		127,5,16,0,0,126,125,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,134,5,
		36,0,0,129,131,5,14,0,0,130,132,3,18,9,0,131,130,1,0,0,0,131,132,1,0,0,
		0,132,133,1,0,0,0,133,135,5,15,0,0,134,129,1,0,0,0,134,135,1,0,0,0,135,
		158,1,0,0,0,136,137,5,14,0,0,137,138,3,2,1,0,138,139,5,15,0,0,139,158,
		1,0,0,0,140,142,5,10,0,0,141,143,3,18,9,0,142,141,1,0,0,0,142,143,1,0,
		0,0,143,145,1,0,0,0,144,146,5,17,0,0,145,144,1,0,0,0,145,146,1,0,0,0,146,
		147,1,0,0,0,147,158,5,11,0,0,148,150,5,12,0,0,149,151,3,22,11,0,150,149,
		1,0,0,0,150,151,1,0,0,0,151,153,1,0,0,0,152,154,5,17,0,0,153,152,1,0,0,
		0,153,154,1,0,0,0,154,155,1,0,0,0,155,158,5,13,0,0,156,158,3,24,12,0,157,
		126,1,0,0,0,157,136,1,0,0,0,157,140,1,0,0,0,157,148,1,0,0,0,157,156,1,
		0,0,0,158,17,1,0,0,0,159,164,3,2,1,0,160,161,5,17,0,0,161,163,3,2,1,0,
		162,160,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,19,
		1,0,0,0,166,164,1,0,0,0,167,168,5,36,0,0,168,169,5,21,0,0,169,176,3,2,
		1,0,170,171,5,17,0,0,171,172,5,36,0,0,172,173,5,21,0,0,173,175,3,2,1,0,
		174,170,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,21,
		1,0,0,0,178,176,1,0,0,0,179,180,3,2,1,0,180,181,5,21,0,0,181,189,3,2,1,
		0,182,183,5,17,0,0,183,184,3,2,1,0,184,185,5,21,0,0,185,186,3,2,1,0,186,
		188,1,0,0,0,187,182,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,
		0,0,0,190,23,1,0,0,0,191,189,1,0,0,0,192,194,5,18,0,0,193,192,1,0,0,0,
		193,194,1,0,0,0,194,195,1,0,0,0,195,207,5,32,0,0,196,207,5,33,0,0,197,
		199,5,18,0,0,198,197,1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,0,200,207,5,
		31,0,0,201,207,5,34,0,0,202,207,5,35,0,0,203,207,5,26,0,0,204,207,5,27,
		0,0,205,207,5,28,0,0,206,193,1,0,0,0,206,196,1,0,0,0,206,198,1,0,0,0,206,
		201,1,0,0,0,206,202,1,0,0,0,206,203,1,0,0,0,206,204,1,0,0,0,206,205,1,
		0,0,0,207,25,1,0,0,0,29,35,42,50,61,73,75,82,88,91,101,104,114,117,120,
		122,126,131,134,142,145,150,153,157,164,176,189,193,198,206
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Cel.Parser.Gen
